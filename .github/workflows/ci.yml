name: CI

on:
  push:
    branches: [main]
  pull_request:
  merge_group:
    types: [checks_requested]

jobs:
  check:
    name: clippy
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      MLIR_SYS_160_PREFIX: /usr/lib/llvm-16/
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: add llvm deb repository
        uses: myci-actions/add-deb-repo@10
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
          repo-name: llvm-repo
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install LLVM
        run: sudo apt-get install libllvm-16-ocaml-dev libllvm16 llvm-16 llvm-16-dev llvm-16-doc llvm-16-examples llvm-16-runtime clang-16 clang-tools-16 clang-16-doc libclang-common-16-dev libclang-16-dev libclang1-16 lld-16 libpolly-16-dev libclang-rt-16-dev libc++-16-dev libc++abi-16-dev libmlir-16-dev mlir-16-tools
      - name: Clippy
        run: make check

  fmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Check for unnecessary dependencies.
  udeps:
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      MLIR_SYS_160_PREFIX: /usr/lib/llvm-16/
      RUSTUP_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2

      - name: add llvm deb repository
        uses: myci-actions/add-deb-repo@10
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
          repo-name: llvm-repo
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install LLVM
        run: sudo apt-get install libllvm-16-ocaml-dev libllvm16 llvm-16 llvm-16-dev llvm-16-doc llvm-16-examples llvm-16-runtime clang-16 clang-tools-16 clang-16-doc libclang-common-16-dev libclang-16-dev libclang1-16 lld-16 libpolly-16-dev libclang-rt-16-dev libc++-16-dev libc++abi-16-dev libmlir-16-dev mlir-16-tools

      - name: "Download and run cargo-udeps"
        run: |
          wget -O - -c https://github.com/est31/cargo-udeps/releases/download/v0.1.35/cargo-udeps-v0.1.35-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          cargo-udeps-*/cargo-udeps udeps --all-targets

  cairo-release:
    name: cairo release check
    runs-on: ubuntu-latest
    steps:
      - name: Install deps
        run: sudo apt-get install curl ripgrep jq
      - uses: actions/checkout@v3
      - name: Check cairo release
        run: bash .github/scripts/check-git-deps.sh '${{ secrets.GITHUB_TOKEN }}'

  coverage:
    name: test and coverage
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      MLIR_SYS_160_PREFIX: /usr/lib/llvm-16/
      RUST_LOG: debug
    steps:
      - uses: actions/checkout@v3
      - name: Setup rust env
        uses: dtolnay/rust-toolchain@stable
      - name: Retreive cached dependecies
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: add llvm deb repository
        uses: myci-actions/add-deb-repo@10
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main
          repo-name: llvm-repo
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install LLVM
        run: sudo apt-get install libllvm-16-ocaml-dev libllvm16 llvm-16 llvm-16-dev llvm-16-doc llvm-16-examples llvm-16-runtime clang-16 clang-tools-16 clang-16-doc libclang-common-16-dev libclang-16-dev libclang1-16 lld-16 libpolly-16-dev libclang-rt-16-dev libc++-16-dev libc++abi-16-dev libmlir-16-dev mlir-16-tools
      - name: Fetch corelibs.
        run: ./scripts/fetch-corelibs.sh
      - name: test and generate coverage
        run: make coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
          fail_ci_if_error: true
