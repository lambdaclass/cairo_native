searchState.loadedDescShard("cairo_native_runtime", 0, "Felt252 type used in cairo native runtime\nA formatted string representation of anything formattable …\nConverts a bigint representing a felt252 to a Cairo …\nConverts a bigint representing a felt252 to a Cairo …\nFree a dictionary using an optional callback to drop each …\nDuplicate a dictionary using a provided callback to clone …\nCompute the total gas refund for the dictionary at squash …\nReturn a pointer to the entry’s value pointer for a …\nAllocate a new dictionary.\nGet the gas builtin from the internal thread local.\nBased on <code>cairo-lang-runner</code>’s implementation.\nCompute <code>ec_point_from_x_nz(x)</code> and store it.\nCompute <code>ec_point_try_new_nz(x)</code>.\nCompute <code>ec_state_add(state, point)</code> and store the state …\nCompute <code>ec_state_add_mul(state, scalar, point)</code> and store …\nCompute <code>ec_state_init()</code> and store the state back.\nCompute <code>ec_state_try_finalize_nz(state)</code> and store the …\nCompute <code>hades_permutation(op0, op1, op2)</code> and replace the …\nCompute <code>pedersen(lhs, rhs)</code> and store it into <code>dst</code>.\nStore the gas builtin in the internal thread local. …\nFormats a string or a short string / <code>felt252</code>. Returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the formatted item as is.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWraps the formatted item with quote, if it’s a string. …")