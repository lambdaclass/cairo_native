%{ memory[ap + 0] = 4820 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206636, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 249;
[fp + -6] = [ap + 0] + 4820, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 224;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 3];
jmp rel 203;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 170;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 4], ap++;
[ap + 3] = [[fp + -9] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 6];
jmp rel 143 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -9] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 126;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 5], ap++;
[ap + 3] = [[fp + -9] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 7];
jmp rel 99 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -9] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
call rel 2749;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 15481;
[ap + 0] = [ap + -1] + 15480, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 57490, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -31] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -32] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 6];
jmp rel 47;
[ap + -32] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -9] + 6];
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -25], ap++;
call rel 2706;
jmp rel 20 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -5] = [[ap + -1] + 0];
[ap + -4] = [[ap + -1] + 1];
[ap + -3] = [[ap + -1] + 2];
[ap + -2] = [[ap + -1] + 3];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 4, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -35], ap++;
jmp rel 63;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [ap + -24] + 1030, ap++;
jmp rel 18;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -17] + 2340, ap++;
jmp rel 12;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -19] + 1800, ap++;
jmp rel 6;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -12] + 3210, ap++;
call rel 2971;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -10] + 3410, ap++;
jmp rel 6;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 4620, ap++;
call rel 2953;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2942;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 6;
%{ memory[ap + 0] = 7960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203496, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 312;
[fp + -6] = [ap + 0] + 7960, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 288;
[fp + 3] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -4] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 3];
jmp rel 267;
%{
(value, scalar) = (memory[fp + 3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -3] = [[fp + -8] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 235;
[fp + 5] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 5] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 4], ap++;
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 6];
jmp rel 208 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 5] = [[fp + -8] + 4];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 191;
[fp + 4] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + 3] = [[fp + -8] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 7];
jmp rel 164 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 4] = [[fp + -8] + 5];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 137;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 2811;
jmp rel 112 if [ap + -6] != 0;
jmp rel 105 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 2455;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 15189;
[ap + 0] = [ap + -1] + 15188, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 46780, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 67;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
call rel 2875;
[fp + 0] = [ap + -6];
[fp + 2] = [ap + -5];
[fp + 1] = [ap + -4];
jmp rel 37 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 3115;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 92;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 16;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -19] + 4840, ap++;
call rel 3105;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [ap + -21] + 4200, ap++;
jmp rel 18;
[ap + 0] = [fp + -8] + 5, ap++;
[ap + 0] = [ap + -15] + 5500, ap++;
jmp rel 12;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -17] + 4960, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -11] + 6360, ap++;
call rel 2634;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -9] + 6560, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 7760, ap++;
call rel 2617;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2607;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 7;
%{ memory[ap + 0] = 8360 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203096, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 332;
[fp + -6] = [ap + 0] + 8360, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 307;
[fp + 4] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 4] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 3];
jmp rel 286;
%{
(value, scalar) = (memory[fp + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 253;
[fp + 6] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 6] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 6], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 4], ap++;
[ap + 3] = [[fp + -9] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 6];
jmp rel 226 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 6] = [[fp + -9] + 4];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 209;
[fp + 5] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 5] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 5], ap++;
[ap + 3] = [[fp + -9] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 7];
jmp rel 182 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 5] = [[fp + -9] + 5];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 154;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 2477;
jmp rel 128 if [ap + -6] != 0;
jmp rel 121 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 2121;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 14854;
[ap + 0] = [ap + -1] + 14853, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 66500, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -18] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -19] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -22] + 0];
jmp rel 76;
[ap + -19] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
call rel 2844;
[fp + 2] = [ap + -11];
[fp + 0] = [ap + -10];
[fp + 3] = [ap + -9];
[fp + 1] = [ap + -8];
jmp rel 43 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -7] = [[ap + -1] + 0];
[ap + -6] = [[ap + -1] + 1];
[ap + -5] = [[ap + -1] + 2];
[ap + -4] = [[ap + -1] + 3];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 4];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 5, ap++;
call rel 2768;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -22], ap++;
jmp rel 96;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1870, ap++;
jmp rel 17;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [ap + -19] + 5240, ap++;
call rel 2754;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [ap + -21] + 4600, ap++;
jmp rel 18;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -15] + 5900, ap++;
jmp rel 12;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -17] + 5360, ap++;
jmp rel 6;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -11] + 6760, ap++;
call rel 2282;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -9] + 6960, ap++;
jmp rel 6;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 8160, ap++;
call rel 2264;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2253;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 10;
%{ memory[ap + 0] = 22190 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768189266, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 383;
[fp + -6] = [ap + 0] + 22190, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3116;
jmp rel 360 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[fp + 8] = [ap + -6];
[fp + 9] = [ap + -5];
call rel 3517;
jmp rel 340 if [ap + -8] != 0;
jmp rel 326 if [ap + -5] != 0;
[fp + 4] = [ap + -4];
[fp + 5] = [ap + -3];
[fp + 6] = [ap + -2];
[fp + 7] = [ap + -1];
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 302;
[fp + 1] = [[ap + -8] + 0];
%{ memory[ap + 0] = (memory[fp + 1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 1] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 279 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 1] = [[ap + -12] + 0];
[ap + 0] = [fp + 1] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 259;
[fp + 3] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -22] + 3], ap++;
[ap + -5] = [[ap + -23] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 236 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 3] = [[ap + -17] + 2];
[ap + 0] = [fp + 3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -18] + 3];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 216;
[fp + 2] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 5], ap++;
[ap + -5] = [[ap + -28] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 193 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 2] = [[ap + -22] + 4];
[ap + 0] = [fp + 2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 173;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -32] + 7], ap++;
[ap + -5] = [[ap + -33] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 150 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -27] + 6];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 120;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -32] + 8, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 3523;
jmp rel 95 if [ap + -6] != 0;
jmp rel 88 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1713;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 14447;
[ap + 0] = [ap + -1] + 14446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146990, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -15] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -16] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 48;
[ap + -16] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 3565;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 127;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1570, ap++;
jmp rel 16;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [ap + -31] + 4940, ap++;
call rel 3949;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -33] + 9, ap++;
[ap + 0] = [ap + -33] + 4670, ap++;
jmp rel 41;
[ap + 0] = [ap + -26] + 6, ap++;
[ap + 0] = [ap + -26] + 5870, ap++;
jmp rel 35;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -28] + 5700, ap++;
jmp rel 29;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -21] + 6900, ap++;
jmp rel 23;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -23] + 6730, ap++;
jmp rel 17;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -16] + 7930, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 7760, ap++;
jmp rel 5;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 9060, ap++;
call rel 2323;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 1874;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 1857;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1847;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 5040 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 132;
[fp + -6] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 108;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 3810;
jmp rel 83 if [ap + -6] != 0;
jmp rel 76 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1458;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 14192;
[ap + 0] = [ap + -1] + 14191, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87440, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 38;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 3864;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 36;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 16;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 4840, ap++;
call rel 1705;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1695;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 2880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 198;
[fp + -6] = [ap + 0] + 2880, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 175;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 154;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1297;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14031;
[ap + 0] = [ap + -1] + 14030, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 105;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -18] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -4] = [[fp + -7] + 6], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 7];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 6], ap++;
[ap + -7] = [[fp + -7] + 7];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -12] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2680, ap++;
call rel 1486;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1477;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 3960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 182;
[fp + -6] = [ap + 0] + 3960, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 159;
[fp + 1] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 1] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 138;
%{
(value, scalar) = (memory[fp + 1], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 110;
[ap + 0] = [[ap + -3] + 0], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -11] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [ap + -3];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1057;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13791;
[ap + 0] = [ap + -1] + 13790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 70340, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -12] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -13] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 54;
[ap + -13] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3635;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + -6] = [ap + 0] + [fp + 0], ap++;
call rel 3781;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 38;
call rel 1300;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 2560, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 3760, ap++;
call rel 1283;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1274;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 148;
[fp + -6] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 125;
[fp + 0] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 104;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 875;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13609;
[ap + 0] = [ap + -1] + 13608, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 70240, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 53;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3453;
jmp rel 33 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
call rel 3600;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2770, ap++;
call rel 1114;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1105;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 148;
[fp + -6] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 125;
[fp + 0] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 104;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 706;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13440;
[ap + 0] = [ap + -1] + 13439, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 70240, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 53;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3284;
jmp rel 33 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
call rel 3431;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2770, ap++;
call rel 945;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 936;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 145;
[fp + -6] = [ap + 0] + 5220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 122;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 3462;
jmp rel 98 if [ap + -6] != 0;
jmp rel 91 if [ap + -3] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 544;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13279;
[ap + 0] = [ap + -1] + 13278, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 46090, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 52;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3125;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel 3517;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 34;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1650, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 5020, ap++;
call rel 779;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 770;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 145;
[fp + -6] = [ap + 0] + 5220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 122;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 3296;
jmp rel 98 if [ap + -6] != 0;
jmp rel 91 if [ap + -3] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 378;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13113;
[ap + 0] = [ap + -1] + 13112, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 46090, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 52;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 2959;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel 3435;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 34;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1650, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 5020, ap++;
call rel 613;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 604;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 7840 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203616, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 232;
[fp + -6] = [ap + 0] + 7840, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 209;
[fp + 1] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 1] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 188;
%{
(value, scalar) = (memory[fp + 1], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 157;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 6];
jmp rel 136;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 6];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 105;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 3068;
jmp rel 81 if [ap + -6] != 0;
jmp rel 74 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 152;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 12887;
[ap + 0] = [ap + -1] + 12886, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 147870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 37;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 3299;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 76;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 4840, ap++;
call rel 834;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -17] + 5040, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -11] + 6240, ap++;
call rel 376;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 6440, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 7640, ap++;
call rel 360;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 351;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
call rel 3327;
ret;
ap += 3;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 1] = [fp + -8] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -10] = [[fp + -6] + 1];
[ap + -2] = [[fp + -6] + 2];
[ap + -3] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 261 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 21 if [ap + -1] != 0;
call rel 3279;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -5] = [[fp + -6] + 8];
[fp + -5] = [[fp + -6] + 9];
[ap + -4] = [[fp + -6] + 10];
[ap + -3] = [[fp + -6] + 11];
[ap + -2] = [[fp + -6] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 14], ap++;
jmp rel 201 if [ap + -1] != 0;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
call rel 3240;
[fp + 2] = [fp + -6] + 17;
jmp rel 174 if [ap + -7] != 0;
jmp rel 116 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 10, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 3572;
[fp + 0] = [ap + -6];
jmp rel 61 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 3624;
jmp rel 27 if [ap + -7] != 0;
call rel 12578;
[ap + 0] = [ap + -1] + 12577, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12270, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = 119674880063757522161687995182389208939526319504019663621515716359683735285, ap++;
[ap + -1] = [[fp + 1] + 0];
[ap + -3] = [[fp + 1] + 1];
[ap + 0] = [[fp + 1] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 3725;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 1] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
call rel 3995;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
ret;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
call rel 2997;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
call rel 2992;
ret;
[ap + 0] = 375233589013918064796019, ap++;
call rel 2987;
ret;
%{ memory[ap + 0] = 5140 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768206316, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 95;
[fp + -8] = [ap + 0] + 5140, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 6040, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
call rel 3893;
jmp rel 25 if [ap + -6] != 0;
jmp rel 16 if [ap + -3] != 0;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 2, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -58;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1970, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 21;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -105;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -7] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -7] = [[fp + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 0] = [fp + -10] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -11] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -3] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
call rel 2823;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -5] = [[fp + -8] + 8];
[fp + -7] = [[fp + -8] + 9];
[ap + -4] = [[fp + -8] + 10];
[ap + -3] = [[fp + -8] + 11];
[ap + -2] = [[fp + -8] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 14], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
call rel 2789;
[fp + 1] = [fp + -8] + 17;
jmp rel 127 if [ap + -7] != 0;
jmp rel 88 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 10, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 3121;
jmp rel 39 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 3744;
jmp rel 12 if [ap + -7] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 3818;
jmp rel 13 if [ap + -6] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 5470, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 3591;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
ret;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
%{ memory[ap + 0] = 1570 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209886, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 33;
[fp + -7] = [ap + 0] + 1570, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -26;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2270, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -417;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
call rel 2560;
ret;
ap += 17;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -7] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -7] = [[fp + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 15] = [fp + -10] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -12] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -3] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 392 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 25 if [ap + -1] != 0;
call rel 2512;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -5] = [[fp + -8] + 8];
[fp + -7] = [[fp + -8] + 9];
[ap + -4] = [[fp + -8] + 10];
[ap + -3] = [[fp + -8] + 11];
[ap + -2] = [[fp + -8] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 14], ap++;
jmp rel 324 if [ap + -1] != 0;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
call rel 2469;
[fp + 16] = [fp + -8] + 17;
jmp rel 293 if [ap + -7] != 0;
jmp rel 171 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 10, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 2801;
[fp + 14] = [ap + -6];
jmp rel 112 if [ap + -5] != 0;
[fp + 12] = [ap + -2];
[fp + 13] = [ap + -1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 2851;
[fp + 5] = [ap + -10];
jmp rel 71 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[fp + 6] = [ap + -18];
[fp + 7] = [ap + -17];
[fp + 8] = [ap + -16];
[fp + 9] = [ap + -15];
[fp + 10] = [ap + -14];
[fp + 11] = [ap + -13];
call rel 3395;
jmp rel 29 if [ap + -7] != 0;
call rel 11781;
[ap + 0] = [ap + -1] + 11780, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11710, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21] + [ap + -2], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = 119674880063757522161687995182389208939526319504019663621515716359683735285, ap++;
[ap + -1] = [[fp + 15] + 0];
[ap + -2] = [[fp + 15] + 1];
[ap + 0] = [[fp + 15] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 2900;
[fp + 0] = [ap + -7];
jmp rel 57 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 15] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[fp + 1] = [ap + -15];
[fp + 2] = [ap + -14];
[fp + 3] = [ap + -13];
[fp + 4] = [ap + -12];
call rel 3365;
jmp rel 17 if [ap + -6] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 15] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
call rel 3105;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
ret;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 396;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 15;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 5;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 329;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 322;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 4;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 268;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 261;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 3;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 207;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 200;
[ap + -4] = [ap + 0] + 4, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 2;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 146;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 139;
[ap + -5] = [ap + 0] + 5, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 1;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 85;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 78;
[ap + -6] = [ap + 0] + 6, ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -10] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 26;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 19;
ap += 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 18;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 131;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 2931;
jmp rel 100 if [ap + -6] != 0;
jmp rel 91 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 64;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -15] + 1170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [[ap + -20] + 0], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 14;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 1210, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1710, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1910, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 24;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5280, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 28110 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768183346, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 82;
[fp + -8] = [ap + 0] + 28110, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 29010, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2872;
jmp rel 42 if [ap + -16] != 0;
jmp rel 26 if [ap + -13] != 0;
[ap + -12] = [[fp + -4] + 0];
[ap + -11] = [[fp + -4] + 1];
[ap + -10] = [[fp + -4] + 2];
[ap + -9] = [[fp + -4] + 3];
[ap + -8] = [[fp + -4] + 4];
[ap + -7] = [[fp + -4] + 5];
[ap + -6] = [[fp + -4] + 6];
[ap + -5] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -57;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 3470, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -1546;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 12;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -15], ap++;
call rel 3114;
[fp + 10] = [ap + -5];
[fp + 11] = [ap + -4];
jmp rel 414 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 3260;
call rel 10824;
[ap + 0] = [ap + -1] + 10823, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 3310;
[fp + 9] = [ap + -5];
jmp rel 375 if [ap + -4] != 0;
[fp + 4] = [ap + -1];
jmp rel [fp + -14];
jmp rel 34;
jmp rel 26;
jmp rel 21;
jmp rel 16;
jmp rel 11;
jmp rel 6;
[ap + 0] = [ap + -6] + 100, ap++;
jmp rel 16;
[ap + 0] = [ap + -6], ap++;
jmp rel 13;
[ap + 0] = [ap + -6], ap++;
jmp rel 10;
[ap + 0] = [ap + -6], ap++;
jmp rel 7;
[ap + 0] = [ap + -6], ap++;
jmp rel 4;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = 926137786937080942066379705305780976156692330066586492942502267841683559500, ap++;
jmp rel 6;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = 119674880063757522161687995182389208939526319504019663621515716359683735285, ap++;
[ap + -1] = [[fp + 10] + 0];
[fp + 4] = [[fp + 10] + 1];
[ap + 0] = [[fp + 10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3348;
[fp + 8] = [fp + 10] + 3;
jmp rel 278 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -8] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 254 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 225;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3535;
jmp rel 195 if [ap + -3] != 0;
[fp + 5] = [ap + -2];
[fp + 6] = [ap + -1];
jmp rel [fp + -14];
jmp rel 34;
jmp rel 26;
jmp rel 21;
jmp rel 16;
jmp rel 11;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
jmp rel 16;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
jmp rel 4;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1334664777155929186801060013143550635909228974761917574271585221149587386350, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = 422073521398876225481035229297186717153911541103484599068011287805644405767, ap++;
[fp + 7] = [ap + -1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 4], ap++;
[fp + 6] = [ap + 0] + [fp + 5], ap++;
[ap + 0] = [fp + 7], ap++;
call rel 3590;
jmp rel 131 if [ap + -3] != 0;
jmp rel [fp + -14];
jmp rel 50;
jmp rel 42;
jmp rel 34;
jmp rel 26;
jmp rel 18;
jmp rel 10;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
jmp rel 37;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 31;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 25;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 19;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 13;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 7;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -13], ap++;
[fp + 3] = [ap + -14];
[fp + 2] = [ap + -13];
call rel 3772;
[fp + 0] = [ap + -7];
[fp + 1] = [ap + -6];
jmp rel 44 if [ap + -4] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 453315402536231072555619669907522599583709578777227265110163302022970973962, ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3988;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 4023;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -12] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
call rel 991;
ret;
%{ memory[ap + 0] = 26490 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768184966, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 82;
[fp + -8] = [ap + 0] + 26490, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 27390, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3938;
jmp rel 42 if [ap + -16] != 0;
jmp rel 26 if [ap + -13] != 0;
[ap + -12] = [[fp + -4] + 0];
[ap + -11] = [[fp + -4] + 1];
[ap + -10] = [[fp + -4] + 2];
[ap + -9] = [[fp + -4] + 3];
[ap + -8] = [[fp + -4] + 4];
[ap + -7] = [[fp + -4] + 5];
[ap + -6] = [[fp + -4] + 6];
[ap + -5] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -57;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 3470, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -2088;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 2572;
jmp rel 153 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 4256;
[fp + 0] = [ap + -10];
[fp + 3] = [ap + -9];
jmp rel 122 if [ap + -7] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[fp + 1] = [ap + -6];
[fp + 2] = [ap + -5];
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -14] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 6], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 0], ap++;
[ap + -4] = [[ap + -22] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -23] + 2];
jmp rel 67;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -20] + 0], ap++;
[ap + -3] = [[ap + -21] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -22] + 2];
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [[ap + -19] + 4], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 3088;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
call rel 4652;
jmp rel 14 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 3734;
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -31] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -16] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [[ap + -19] + 7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 141 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -6] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -7] = [[fp + -6] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = 0, ap++;
[fp + 0] = [fp + -4] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -3] = [[fp + -3] + 6];
[ap + -2] = [[fp + -3] + 7];
[ap + -4] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 11], ap++;
[fp + 1] = [fp + -3] + 12;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 46 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25210060730641651003830129888238850617644299624277362, ap++;
[ap + 0] = 22, ap++;
call rel 4725;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 5051;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -5] + 17910, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[fp + -3] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
jmp rel 31 if [fp + -3] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4], ap++;
call rel 4972;
jmp rel 6 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 30;
ap += 2;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
call rel 4943;
jmp rel 18 if [ap + -3] != 0;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 2;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 23;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
%{ memory[ap + 0] = 2680 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208776, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 91;
[fp + -8] = [ap + 0] + 2680, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 3580, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[fp + -7] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 3];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 3];
[ap + -6] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -65;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -2661;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 9729;
[ap + 0] = [ap + -1] + 9728, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29790, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 33;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = 1, ap++;
call rel -275;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -42;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 9675;
[ap + 0] = [ap + -1] + 9674, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29990, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -2749;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 9645;
[ap + 0] = [ap + -1] + 9644, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29790, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 33;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = 0, ap++;
call rel -359;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -42;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 9591;
[ap + 0] = [ap + -1] + 9590, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29990, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -2833;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 3;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
call rel -421;
jmp rel 124 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4655;
[fp + 0] = [ap + -5];
jmp rel 104 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[fp + 1] = [ap + -4];
[fp + 2] = [ap + -3];
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -9] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
[fp + -5] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 78 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 563027124402777014625093953982261603, ap++;
[ap + 0] = 15, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1367508244613640598782226851263609, ap++;
[ap + 0] = 14, ap++;
call rel 4742;
jmp rel 45 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 563027124402777014625093953982261603, ap++;
[ap + 0] = 15, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 22942981201663884872471587768649531551604, ap++;
[ap + 0] = 17, ap++;
call rel 5155;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -11] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
[ap + 0] = [[ap + -14] + 8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
[ap + 0] = 117999861104695822858408463129383551244204096177556094315754355, ap++;
call rel -9;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 352;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 256 if [ap + -1] != 0;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 241;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 215 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 193;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 167 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 145;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 119 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 4];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 97;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 71 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 6];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 9], ap++;
[ap + -5] = [[fp + -5] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 25 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 9];
ap += 5;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [fp + -5] + 11, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 175;
ap += 8;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 167;
ap += 6;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 158;
ap += 14;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 150;
ap += 12;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 141;
ap += 20;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 133;
ap += 18;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 124;
ap += 26;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 116;
ap += 24;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -36] + 1, ap++;
[ap + 0] = [ap + -36], ap++;
jmp rel 107;
ap += 32;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
jmp rel 100;
ap += 23;
[ap + -24] = [ap + 0] + 1, ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 35;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 28;
ap += 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 36;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 10340 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768201116, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 52;
[fp + -8] = [ap + 0] + 10340, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 5046;
jmp rel 27 if [ap + -5] != 0;
jmp rel 14 if [ap + -2] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -31;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -3433;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 8958;
[ap + 0] = [ap + -1] + 8957, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 31250, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -12] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -13] + 0];
jmp rel 162;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -13] + 0];
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
call rel 5054;
jmp rel 130 if [ap + -8] != 0;
jmp rel 113 if [ap + -5] != 0;
%{ memory[ap + 0] = (memory[fp + -6] + memory[ap + -4]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 79;
[ap + 1] = [fp + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -16] + 0];
%{ memory[ap + 0] = (memory[fp + -5] + memory[ap + -6]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 1];
jmp rel 59;
[ap + 1] = [fp + -5] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -19] + 1];
%{ memory[ap + 0] = (memory[fp + -4] + memory[ap + -8]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [ap + -9], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -22] + 2];
jmp rel 39;
[ap + 1] = [fp + -4] + [ap + -9], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -22] + 2];
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -10]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -25] + 3];
jmp rel 21;
[ap + 1] = [fp + -3] + [ap + -11], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -25] + 3];
[ap + 0] = [ap + -25] + 4, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -96;
ret;
[ap + 0] = [ap + -25] + 4, ap++;
[ap + 0] = [ap + -25] + 2370, ap++;
jmp rel 24;
ap += 3;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -25] + 2710, ap++;
jmp rel 16;
ap += 6;
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -25] + 3150, ap++;
jmp rel 8;
ap += 9;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -25] + 3690, ap++;
call rel 5096;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 5550, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel -3628;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 260 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 220 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = 4294967295, ap++;
[ap + -3] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -7] + 1];
jmp rel 171;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -7], memory[ap + -1]) %}
[ap + 5] = [[fp + -7] + 2], ap++;
[ap + 5] = [[fp + -7] + 3], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -7] + 5];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -14] = [ap + -3] + [ap + -1];
[ap + 0] = 4294967295, ap++;
[ap + -3] = [[fp + -5] + 5];
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [[fp + -5] + 7], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -7] + 6];
jmp rel 117;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 6];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -19], memory[ap + -1]) %}
[ap + 5] = [[fp + -7] + 7], ap++;
[ap + 5] = [[fp + -7] + 8], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -7] + 9], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -7] + 10];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -26] = [ap + -3] + [ap + -1];
[ap + 0] = 4294967295, ap++;
[ap + -3] = [[fp + -5] + 10];
[ap + -1] = [[fp + -5] + 11];
[ap + 0] = [[fp + -5] + 12], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -7] + 11];
jmp rel 65;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 11];
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -31], memory[ap + -1]) %}
[ap + 5] = [[fp + -7] + 12], ap++;
[ap + 5] = [[fp + -7] + 13], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -7] + 14], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -7] + 15];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -38] = [ap + -3] + [ap + -1];
[ap + 0] = 4294967295, ap++;
[ap + -3] = [[fp + -5] + 15];
[ap + -1] = [[fp + -5] + 16];
[ap + 0] = [[fp + -5] + 17], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -7] + 16];
jmp rel 23;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 16];
ap += 11;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7] + 17, ap++;
[ap + 0] = [ap + -2] + 1190, ap++;
[ap + 0] = [fp + -5] + 20, ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -23], ap++;
ret;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7] + 17, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5] + 20, ap++;
jmp rel 58;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 8576;
[ap + 0] = [ap + -1] + 8575, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 1490, ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 15, ap++;
jmp rel 40;
ap += 17;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 8558;
[ap + 0] = [ap + -1] + 8557, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 3530, ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 10, ap++;
jmp rel 20;
ap += 29;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 8538;
[ap + 0] = [ap + -1] + 8537, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 5760, ap++;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
call rel 4793;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 39;
call rel 4780;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 54;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
call rel -947;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 56;
[fp + -8] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 2670, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 18;
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -43;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2370, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -4000;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
call rel 8388;
[ap + 0] = [ap + -1] + 8387, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25770, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -12] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -13] + 0];
jmp rel 83;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -8] + 0], ap++;
[ap + 0] = [[fp + -8] + 1], ap++;
[fp + 0] = [fp + -8] + 2;
[fp + 1] = [fp + -7];
call rel 4632;
jmp rel 18 if [ap + -3] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -55;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel 8314;
[ap + 0] = [ap + -1] + 8313, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25970, ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4115;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 2;
call rel 8268;
[ap + 0] = [ap + -1] + 8267, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 22450, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -11] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 78;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + 0] = [[fp + -7] + 1], ap++;
[fp + 0] = [fp + -7] + 2;
[fp + 1] = [fp + -6];
call rel 4804;
jmp rel 17 if [ap + -3] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -53;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
call rel 8198;
[ap + 0] = [ap + -1] + 8197, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 22650, ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4230;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
%{ memory[ap + 0] = 2680 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208776, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 91;
[fp + -8] = [ap + 0] + 2680, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 3580, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[fp + -7] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[fp + -9] + 3];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[fp + -9] + 3];
[ap + -6] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -65;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -4345;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 281;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 50 if [ap + -1] != 0;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 36;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 22140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -20] + 0], ap++;
ret;
[ap + 0] = [fp + -5] + 21640, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 234;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 83 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -3123;
jmp rel 41 if [ap + -8] != 0;
jmp rel 32 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 14560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 14060, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 77;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 106 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4593;
jmp rel 64 if [ap + -15] != 0;
jmp rel 25 if [ap + -12] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 400, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 22140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + 22340, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 2;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 141 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -6] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -7] = [[fp + -6] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = 0, ap++;
[fp + 0] = [fp + -4] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -3] = [[fp + -3] + 6];
[ap + -2] = [[fp + -3] + 7];
[ap + -4] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 11], ap++;
[fp + 1] = [fp + -3] + 12;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 46 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25210060730641651003830129888238850617644299624277362, ap++;
[ap + 0] = 22, ap++;
call rel 2318;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 2644;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -5] + 17910, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
jmp rel [fp + -6];
jmp rel 59;
jmp rel 49;
jmp rel 39;
jmp rel 29;
jmp rel 19;
jmp rel 9;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 5, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 6, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
call rel 7498;
[ap + 0] = [ap + -1] + 7497, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 3], ap++;
[ap + 0] = [ap + -1] + 1770, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 94;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 70;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 43;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + [ap + -2], ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + -1] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
%{ memory[ap + 0] = 1970 <= memory[ap + -9] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -10] = [ap + 0] + 1970, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 1];
jmp rel 20;
[ap + -10] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
call rel -62;
ret;
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
jmp rel 42;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [fp + -7] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + -1] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -9] + 1870, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -6] = [[fp + -9] + 1];
[fp + -5] = [[fp + -9] + 2];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -4] + 2470, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -9] + 3], ap++;
ret;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
call rel -5020;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -5] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -5], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 0], ap++;
[ap + -2] = [[fp + -10] + 1], ap++;
[ap + -2] = [[fp + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -5] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 3], ap++;
[ap + -1] = [[fp + -10] + 4], ap++;
[ap + -3] = [[fp + -10] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 6], ap++;
[ap + -3] = [[fp + -10] + 7], ap++;
[ap + -16] = [[fp + -10] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 187 if [ap + -17] != 0;
[ap + 1] = [fp + -6] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 9];
jmp rel 163;
[ap + -1] = [[fp + -10] + 9];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -4] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 10], ap++;
[ap + -2] = [[fp + -10] + 11], ap++;
[ap + -2] = [[fp + -10] + 12];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -4] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 13], ap++;
[ap + -1] = [[fp + -10] + 14], ap++;
[ap + -3] = [[fp + -10] + 15];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 16], ap++;
[ap + -3] = [[fp + -10] + 17], ap++;
[ap + -16] = [[fp + -10] + 18];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 118 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 19];
jmp rel 102;
[ap + -1] = [[fp + -10] + 19];
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -3] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -3], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 20], ap++;
[ap + -2] = [[fp + -10] + 21], ap++;
[ap + -2] = [[fp + -10] + 22];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -3] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 23], ap++;
[ap + -1] = [[fp + -10] + 24], ap++;
[ap + -3] = [[fp + -10] + 25];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 26], ap++;
[ap + -3] = [[fp + -10] + 27], ap++;
[ap + -16] = [[fp + -10] + 28];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 57 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 29];
jmp rel 43;
[ap + -1] = [[fp + -10] + 29];
ap += 7;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -9] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[fp + -7] = [[fp + -8] + 3];
[ap + -10] = [[fp + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 5], ap++;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = [[fp + -8] + 5], ap++;
[ap + 0] = [fp + -8] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + 0] = [[fp + -8] + 8], ap++;
ret;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = [fp + -9] + 9780, ap++;
jmp rel 32;
ap += 3;
[ap + 0] = [fp + -10] + 29, ap++;
[ap + 0] = [fp + -9] + 10220, ap++;
jmp rel 40;
ap += 20;
[ap + 0] = [fp + -10] + 20, ap++;
[ap + 0] = [fp + -9] + 13080, ap++;
jmp rel 16;
ap += 23;
[ap + 0] = [fp + -10] + 19, ap++;
[ap + 0] = [fp + -9] + 13620, ap++;
jmp rel 24;
ap += 40;
[ap + 0] = [fp + -10] + 10, ap++;
[ap + 0] = [fp + -9] + 16580, ap++;
call rel 4301;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 43;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = [fp + -9] + 17120, ap++;
call rel 4290;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] * 12, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 4270;
jmp rel 84 if [ap + -3] != 0;
[ap + 0] = 1043237155915217200023777142698719717442160588069512551429544266543089341477, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -6] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[ap + -4] = [[fp + -6] + 4];
[ap + -3] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[fp + 0] = [fp + -6] + 10;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel -1381;
jmp rel 17 if [ap + -6] != 0;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1200, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 3270, ap++;
call rel -1417;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 7028;
[ap + 0] = [ap + -1] + 7027, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 32930, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -9] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -9] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 228;
[fp + -9] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -10] + 0];
call rel 7008;
[ap + 0] = [ap + -1] + 7007, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -5], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
call rel -514;
jmp rel 188 if [ap + -4] != 0;
[fp + -3] = [[fp + -8] + 0];
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -16] = [[fp + -6] + 1];
[ap + -2] = [[fp + -6] + 2];
[ap + -3] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 132 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 25 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
call rel 6933;
[ap + 0] = [ap + -1] + 6932, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 15750, ap++;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -3] = [[fp + -8] + 3];
[ap + -13] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 3], ap++;
[ap + -4] = [[ap + -25] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -27] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -24] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -26] + 4], ap++;
[ap + -7] = [[ap + -27] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -4] = [[fp + -6] + 8];
[ap + -3] = [[fp + -6] + 9];
[ap + -5] = [[fp + -6] + 10];
[ap + -2] = [[fp + -6] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -4] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -36] + 6];
jmp rel 21;
[ap + 1] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -36] + 6];
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -37] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -190;
ret;
call rel 3100;
[ap + 0] = [ap + -44] + 7, ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -32] + 6, ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [fp + -6] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
ret;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -5622;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
call rel 6769;
[ap + 0] = [ap + -1] + 6768, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39990, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -13] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -13] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 0];
jmp rel 207;
[fp + -13] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -14] + 0];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 180;
[ap + 0] = 1, ap++;
[fp + 3] = [fp + -9] + 1;
[fp + 4] = [fp + -8];
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -14] + 1];
jmp rel 152;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -14] + 1];
call rel 6729;
[ap + 0] = [ap + -1] + 6728, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[fp + 0] = [ap + -16];
call rel -794;
[fp + 1] = [ap + -5];
jmp rel 106 if [ap + -4] != 0;
[fp + 5] = [[fp + -9] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 5], ap++;
[fp + 2] = [ap + -9];
call rel 3913;
jmp rel 80 if [ap + -3] != 0;
[fp + -4] = [[fp + -12] + 0];
[fp + 2] = [[fp + -12] + 1];
[ap + 0] = [[fp + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -15] = [[ap + -14] + 1];
[ap + -2] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
[fp + 5] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 21 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -146;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -19] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -22] + 7], ap++;
[ap + 0] = [[ap + -23] + 8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 2848;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 6568;
[ap + 0] = [ap + -1] + 6567, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40190, ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -5858;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 2;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3817;
jmp rel 67 if [ap + -3] != 0;
[ap + 0] = 1062799989286861497646673457769309433976004466846907043354399004328696077865, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[fp + 0] = [ap + -9];
[fp + 1] = [ap + -9] + 3;
call rel -5533;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -15] + 0];
[ap + -5] = [[fp + -15] + 1];
[fp + 0] = [[fp + -15] + 2];
[fp + 1] = [[fp + -15] + 3];
[ap + -3] = [[fp + -15] + 4];
[ap + -2] = [[fp + -15] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15]) %}
[ap + 0] = [[fp + -15] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -15] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -15] + 6], ap++;
[ap + 0] = [fp + -15] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -15] + 8], ap++;
[ap + 0] = [[fp + -15] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
call rel -2977;
ret;
ap += 10;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -5082;
jmp rel 371 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[fp + 4] = [ap + -6];
[fp + 5] = [ap + -5];
call rel -4681;
jmp rel 328 if [ap + -8] != 0;
jmp rel 319 if [ap + -5] != 0;
[fp + 6] = [ap + -4];
[fp + 7] = [ap + -3];
[fp + 8] = [ap + -2];
[fp + 9] = [ap + -1];
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 272;
[fp + 1] = [[ap + -8] + 0];
%{ memory[ap + 0] = (memory[fp + 1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 1] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 246 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 1] = [[ap + -12] + 0];
[ap + 0] = [fp + 1] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 224;
[fp + 2] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -22] + 3], ap++;
[ap + -5] = [[ap + -23] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 198 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 2] = [[ap + -17] + 2];
[ap + 0] = [fp + 2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -18] + 3];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 176;
[fp + 3] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 5], ap++;
[ap + -5] = [[ap + -28] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 150 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 3] = [[ap + -22] + 4];
[ap + 0] = [fp + 3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 128;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -32] + 7], ap++;
[ap + -5] = [[ap + -33] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 102 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -27] + 6];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 80;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -32] + 8, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel -4675;
jmp rel 32 if [ap + -6] != 0;
jmp rel 24 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 500, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 186;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [ap + -31] + 3270, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 145;
[ap + 0] = [ap + -33] + 9, ap++;
[ap + 0] = [ap + -33] + 3100, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 58;
[ap + 0] = [ap + -26] + 6, ap++;
[ap + 0] = [ap + -26] + 4300, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 50;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -28] + 4130, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 41;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -21] + 5330, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -23] + 5160, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 24;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -16] + 6360, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 16;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 6190, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 7;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 7490, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 8050, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 40;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5] + 16110, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 30;
call rel 6019;
[ap + 0] = [ap + -1] + 6018, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 115930, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -12] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -13] + 0];
jmp rel 422;
[fp + -12] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 390;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[fp + 0] = [fp + -8] + 12;
[fp + 1] = [fp + -7];
call rel -1738;
[fp + 29] = [ap + -5];
[fp + 28] = [ap + -4];
jmp rel 358 if [ap + -3] != 0;
[fp + 24] = [[fp + -8] + 0];
[fp + 25] = [[fp + -8] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + 24], ap++;
[ap + 0] = [fp + 25], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -1594;
call rel 5970;
[ap + 0] = [ap + -1] + 5969, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[fp + 14] = [[fp + -8] + 2];
[fp + 15] = [[fp + -8] + 3];
[fp + 16] = [[fp + -8] + 4];
[fp + 17] = [[fp + -8] + 5];
[fp + 19] = [[fp + -8] + 6];
[fp + 20] = [[fp + -8] + 7];
[fp + 21] = [[fp + -8] + 8];
[fp + 22] = [[fp + -8] + 9];
[fp + 26] = [[fp + -8] + 10];
[fp + 27] = [[fp + -8] + 11];
call rel -1554;
jmp rel 300 if [ap + -4] != 0;
[fp + 13] = [ap + -1];
jmp rel [fp + 24];
jmp rel 36;
jmp rel 26;
jmp rel 21;
jmp rel 16;
jmp rel 11;
jmp rel 6;
[ap + 0] = [ap + -6] + 100, ap++;
jmp rel 16;
[ap + 0] = [ap + -6], ap++;
jmp rel 13;
[ap + 0] = [ap + -6], ap++;
jmp rel 10;
[ap + 0] = [ap + -6], ap++;
jmp rel 7;
[ap + 0] = [ap + -6], ap++;
jmp rel 4;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = 926137786937080942066379705305780976156692330066586492942502267841683559500, ap++;
[ap + 0] = 1334664777155929186801060013143550635909228974761917574271585221149587386350, ap++;
jmp rel 8;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = 119674880063757522161687995182389208939526319504019663621515716359683735285, ap++;
[ap + 0] = 422073521398876225481035229297186717153911541103484599068011287805644405767, ap++;
[ap + -2] = [[fp + 29] + 0];
[fp + 13] = [[fp + 29] + 1];
[ap + 0] = [[fp + 29] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + 28], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 19], ap++;
[ap + 0] = [fp + 20], ap++;
[ap + 0] = [fp + 21], ap++;
[ap + 0] = [fp + 22], ap++;
call rel -1519;
[fp + 23] = [ap + -96];
jmp rel 191 if [ap + -3] != 0;
[fp + 27] = [ap + 0] + [fp + 26], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 29] + 3, ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + -7] = [ap + 0] * 12, ap++;
[ap + 0] = [fp + 23], ap++;
call rel -1189;
[fp + 10] = [ap + -6];
[fp + 9] = [ap + -5];
[fp + 18] = [ap + -4];
jmp rel 155 if [ap + -3] != 0;
jmp rel [fp + 24];
jmp rel 50;
jmp rel 42;
jmp rel 34;
jmp rel 26;
jmp rel 18;
jmp rel 10;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
jmp rel 37;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + 25], ap++;
jmp rel 31;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [fp + 25], ap++;
jmp rel 25;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [fp + 25], ap++;
jmp rel 19;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + 25], ap++;
jmp rel 13;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + 25], ap++;
jmp rel 7;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + 25], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 26], ap++;
[ap + 0] = [fp + 27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 23], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[fp + 11] = [ap + -15];
[fp + 12] = [ap + -14];
call rel 3168;
jmp rel 61 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 18], ap++;
[ap + 0] = 453315402536231072555619669907522599583709578777227265110163302022970973962, ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = [fp + 17], ap++;
[ap + 0] = [fp + 19], ap++;
[ap + 0] = [fp + 20], ap++;
[ap + 0] = [fp + 21], ap++;
[ap + 0] = [fp + 22], ap++;
[fp + 2] = [ap + -22];
[fp + 3] = [ap + -21];
[fp + 4] = [ap + -20];
[fp + 5] = [ap + -19];
[fp + 6] = [ap + -18];
[fp + 7] = [ap + -17];
[fp + 8] = [ap + -16];
call rel -800;
jmp rel 16 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
call rel -303;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 29] + 3, ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 29], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 28], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 29], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 28], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel 5606;
[ap + 0] = [ap + -1] + 5605, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 116030, ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -6825;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 11;
call rel 5558;
[ap + 0] = [ap + -1] + 5557, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39820, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 215;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 180;
[fp + 5] = [fp + -6] + 1;
[fp + 6] = [fp + -5];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 157;
[fp + 8] = [[fp + -4] + 4];
call rel 5526;
[ap + 0] = [ap + -1] + 5525, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -4] + 3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + 8], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[fp + 1] = [fp + -4] + 5;
[fp + 2] = [fp + -3];
[fp + 0] = [[fp + -4] + 0];
[fp + 9] = [[fp + -4] + 1];
[fp + 10] = [[fp + -4] + 2];
call rel -2002;
[fp + 3] = [ap + -5];
jmp rel 107 if [ap + -4] != 0;
[fp + 7] = [[fp + -6] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 7], ap++;
[fp + 4] = [ap + -9];
call rel 2705;
jmp rel 79 if [ap + -3] != 0;
[fp + 0] = [[fp + -9] + 0];
[fp + 4] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -15] = [[ap + -14] + 1];
[ap + -2] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
[fp + 7] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
call rel -140;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -19] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -23] + 7], ap++;
[ap + 0] = [[ap + -24] + 8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
call rel 5372;
[ap + 0] = [ap + -1] + 5371, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39040, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 17;
ap += 1;
call rel 5355;
[ap + 0] = [ap + -1] + 5354, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39410, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
call rel -7077;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
jmp rel 12 if [fp + -3] != 0;
ap += 74;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 303;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 259;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 2];
jmp rel 233;
[ap + -1] = [[fp + -9] + 2];
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2808;
jmp rel 213 if [ap + -3] != 0;
jmp rel 51 if [ap + -27] != 0;
ap += 32;
[ap + 0] = [fp + -6] * [ap + -33], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -42] + 0], ap++;
[ap + -4] = [[ap + -43] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -44] + 2];
jmp rel 17;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -41] + 0], ap++;
[ap + -3] = [[ap + -42] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -43] + 2];
ap += 1;
[ap + 0] = [ap + -44] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 6;
[ap + 0] = [ap + -44] + 3, ap++;
[ap + 0] = 88068479653790488123916992367510505285, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -5] + 0], ap++;
[ap + 3] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -10] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -5] + 0];
ap += 5;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -37], ap++;
call rel 2977;
jmp rel [ap + -3];
jmp rel 105;
jmp rel 35;
jmp rel 9;
ap += 8;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 49;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -14], memory[ap + -2]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -5] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -8] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -9] * [ap + -2];
[ap + -21] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -20] * [ap + -8], ap++;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2] + [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 25;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -13], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -20] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -1] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3] + [ap + -24], ap++;
[ap + 0] = [fp + -6] * [ap + -33], ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -11] + 2];
jmp rel 17;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -10] + 2];
ap += 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 6;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = 88068479653790488123916992367510505285, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -74], ap++;
ret;
ap += 13;
call rel 3227;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 42;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
ret;
ap += 56;
call rel 3206;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 43;
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 2561;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [ap + -77], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
call rel 1254;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 3139;
jmp rel 10 if [ap + -3] != 0;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 12 if [fp + -4] != 0;
[ap + 0] = 589022817552792543318509852632045264175748210744615699137722900036442648072, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -3] = [[ap + -3] + 1];
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
jmp rel 11;
[ap + 0] = 592812847939322677565668720816539444019393425324860683642110029332411209997, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -3] = [[ap + -3] + 1];
[ap + 0] = [fp + -7] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -4] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[ap + -6] = [[fp + -6] + 4];
[ap + -6] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -1] + 10, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;
call rel 4887;
[ap + 0] = [ap + -1] + 4886, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14780, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 102;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 77;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -4] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 2], ap++;
[ap + -7] = [[fp + -8] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -15] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -4] = [[fp + -5] + 3];
[ap + -2] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -83;
ret;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
call rel 4789;
[ap + 0] = [ap + -1] + 4788, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14980, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -7635;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313215164569295318208292514394769381779806795543033682241894454505053143643, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + -9] = [[ap + -10] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
call rel 2956;
jmp rel 398 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1315925605, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + -2] = [[ap + -9] + 5];
[ap + -1] = [[ap + -9] + 6];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313472685977919867416164, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -17] + 7];
[ap + -6] = [[ap + -17] + 8];
[ap + -5] = [[ap + -17] + 9];
[ap + -4] = [[ap + -17] + 10];
[ap + -3] = [[ap + -17] + 11];
[ap + -2] = [[ap + -17] + 12];
[ap + -1] = [[ap + -17] + 13];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 71959718098290, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -25] + 14];
[ap + -6] = [[ap + -25] + 15];
[ap + -5] = [[ap + -25] + 16];
[ap + -4] = [[ap + -25] + 17];
[ap + -3] = [[ap + -25] + 18];
[ap + -2] = [[ap + -25] + 19];
[ap + -1] = [[ap + -25] + 20];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 20940711753708153, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -33] + 21];
[ap + -6] = [[ap + -33] + 22];
[ap + -5] = [[ap + -33] + 23];
[ap + -4] = [[ap + -33] + 24];
[ap + -3] = [[ap + -33] + 25];
[ap + -2] = [[ap + -33] + 26];
[ap + -1] = [[ap + -33] + 27];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1298232171, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -41] + 28];
[ap + -6] = [[ap + -41] + 29];
[ap + -5] = [[ap + -41] + 30];
[ap + -4] = [[ap + -41] + 31];
[ap + -3] = [[ap + -41] + 32];
[ap + -2] = [[ap + -41] + 33];
[ap + -1] = [[ap + -41] + 34];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 96092938071918, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -49] + 35];
[ap + -6] = [[ap + -49] + 36];
[ap + -5] = [[ap + -49] + 37];
[ap + -4] = [[ap + -49] + 38];
[ap + -3] = [[ap + -49] + 39];
[ap + -2] = [[ap + -49] + 40];
[ap + -1] = [[ap + -49] + 41];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 74171727245165, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -57] + 42];
[ap + -6] = [[ap + -57] + 43];
[ap + -5] = [[ap + -57] + 44];
[ap + -4] = [[ap + -57] + 45];
[ap + -3] = [[ap + -57] + 46];
[ap + -2] = [[ap + -57] + 47];
[ap + -1] = [[ap + -57] + 48];
[ap + 0] = 1797725632952473580645, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 88292074925748493266188457033990501477, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -65] + 49, ap++;
[ap + -9] = [[ap + -69] + 0];
[ap + -8] = [[ap + -69] + 1];
[ap + -7] = [[ap + -69] + 2];
[ap + -6] = [[ap + -69] + 3];
[ap + -5] = [[ap + -69] + 4];
[ap + -4] = [[ap + -69] + 5];
[ap + -3] = [[ap + -69] + 6];
[ap + -2] = [[ap + -69] + 7];
[ap + -1] = [[ap + -69] + 8];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 452823639416, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -79] + 9];
[ap + -8] = [[ap + -79] + 10];
[ap + -7] = [[ap + -79] + 11];
[ap + -6] = [[ap + -79] + 12];
[ap + -5] = [[ap + -79] + 13];
[ap + -4] = [[ap + -79] + 14];
[ap + -3] = [[ap + -79] + 15];
[ap + -2] = [[ap + -79] + 16];
[ap + -1] = [[ap + -79] + 17];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1851878757, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -9] = [[ap + -89] + 18];
[ap + -8] = [[ap + -89] + 19];
[ap + -7] = [[ap + -89] + 20];
[ap + -6] = [[ap + -89] + 21];
[ap + -5] = [[ap + -89] + 22];
[ap + -4] = [[ap + -89] + 23];
[ap + -3] = [[ap + -89] + 24];
[ap + -2] = [[ap + -89] + 25];
[ap + -1] = [[ap + -89] + 26];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8319400191629685864, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -99] + 27];
[ap + -8] = [[ap + -99] + 28];
[ap + -7] = [[ap + -99] + 29];
[ap + -6] = [[ap + -99] + 30];
[ap + -5] = [[ap + -99] + 31];
[ap + -4] = [[ap + -99] + 32];
[ap + -3] = [[ap + -99] + 33];
[ap + -2] = [[ap + -99] + 34];
[ap + -1] = [[ap + -99] + 35];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8532478930809615481, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -109] + 36];
[ap + -8] = [[ap + -109] + 37];
[ap + -7] = [[ap + -109] + 38];
[ap + -6] = [[ap + -109] + 39];
[ap + -5] = [[ap + -109] + 40];
[ap + -4] = [[ap + -109] + 41];
[ap + -3] = [[ap + -109] + 42];
[ap + -2] = [[ap + -109] + 43];
[ap + -1] = [[ap + -109] + 44];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1851986129345051194489, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -119] + 45];
[ap + -8] = [[ap + -119] + 46];
[ap + -7] = [[ap + -119] + 47];
[ap + -6] = [[ap + -119] + 48];
[ap + -5] = [[ap + -119] + 49];
[ap + -4] = [[ap + -119] + 50];
[ap + -3] = [[ap + -119] + 51];
[ap + -2] = [[ap + -119] + 52];
[ap + -1] = [[ap + -119] + 53];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1819632491, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -129] + 54];
[ap + -8] = [[ap + -129] + 55];
[ap + -7] = [[ap + -129] + 56];
[ap + -6] = [[ap + -129] + 57];
[ap + -5] = [[ap + -129] + 58];
[ap + -4] = [[ap + -129] + 59];
[ap + -3] = [[ap + -129] + 60];
[ap + -2] = [[ap + -129] + 61];
[ap + -1] = [[ap + -129] + 62];
[ap + 0] = [ap + -135], ap++;
[ap + 0] = [ap + -135], ap++;
[ap + 0] = 88292074925748493264888317519795414387, ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -135] + 63, ap++;
[fp + 0] = [ap + -139];
[fp + 1] = [ap + -138];
call rel 2652;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + -5] = [[fp + -11] + 1];
[fp + 0] = [[fp + -11] + 2];
[fp + 1] = [[fp + -11] + 3];
[ap + -3] = [[fp + -11] + 4];
[ap + -2] = [[fp + -11] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [fp + -11] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
[ap + 0] = [[fp + -11] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313215164569295318208292514394769381779806795543033682241894454505053143643, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + -9] = [[ap + -10] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
call rel 2520;
jmp rel 317 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1315925605, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + -2] = [[ap + -9] + 5];
[ap + -1] = [[ap + -9] + 6];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313472685977919867416164, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -17] + 7];
[ap + -6] = [[ap + -17] + 8];
[ap + -5] = [[ap + -17] + 9];
[ap + -4] = [[ap + -17] + 10];
[ap + -3] = [[ap + -17] + 11];
[ap + -2] = [[ap + -17] + 12];
[ap + -1] = [[ap + -17] + 13];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 71959718098290, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -25] + 14];
[ap + -6] = [[ap + -25] + 15];
[ap + -5] = [[ap + -25] + 16];
[ap + -4] = [[ap + -25] + 17];
[ap + -3] = [[ap + -25] + 18];
[ap + -2] = [[ap + -25] + 19];
[ap + -1] = [[ap + -25] + 20];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 20940711753708153, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -33] + 21];
[ap + -6] = [[ap + -33] + 22];
[ap + -5] = [[ap + -33] + 23];
[ap + -4] = [[ap + -33] + 24];
[ap + -3] = [[ap + -33] + 25];
[ap + -2] = [[ap + -33] + 26];
[ap + -1] = [[ap + -33] + 27];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1298232171, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -41] + 28];
[ap + -6] = [[ap + -41] + 29];
[ap + -5] = [[ap + -41] + 30];
[ap + -4] = [[ap + -41] + 31];
[ap + -3] = [[ap + -41] + 32];
[ap + -2] = [[ap + -41] + 33];
[ap + -1] = [[ap + -41] + 34];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 96092938071918, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -49] + 35];
[ap + -6] = [[ap + -49] + 36];
[ap + -5] = [[ap + -49] + 37];
[ap + -4] = [[ap + -49] + 38];
[ap + -3] = [[ap + -49] + 39];
[ap + -2] = [[ap + -49] + 40];
[ap + -1] = [[ap + -49] + 41];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 74171727245165, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -57] + 42];
[ap + -6] = [[ap + -57] + 43];
[ap + -5] = [[ap + -57] + 44];
[ap + -4] = [[ap + -57] + 45];
[ap + -3] = [[ap + -57] + 46];
[ap + -2] = [[ap + -57] + 47];
[ap + -1] = [[ap + -57] + 48];
[ap + 0] = 1797725632952473580645, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 88292074925748493266188457033990501477, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -65] + 49, ap++;
[ap + -9] = [[ap + -69] + 0];
[ap + -8] = [[ap + -69] + 1];
[ap + -7] = [[ap + -69] + 2];
[ap + -6] = [[ap + -69] + 3];
[ap + -5] = [[ap + -69] + 4];
[ap + -4] = [[ap + -69] + 5];
[ap + -3] = [[ap + -69] + 6];
[ap + -2] = [[ap + -69] + 7];
[ap + -1] = [[ap + -69] + 8];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 452823639416, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -79] + 9];
[ap + -8] = [[ap + -79] + 10];
[ap + -7] = [[ap + -79] + 11];
[ap + -6] = [[ap + -79] + 12];
[ap + -5] = [[ap + -79] + 13];
[ap + -4] = [[ap + -79] + 14];
[ap + -3] = [[ap + -79] + 15];
[ap + -2] = [[ap + -79] + 16];
[ap + -1] = [[ap + -79] + 17];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1936486260, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -89] + 18];
[ap + -8] = [[ap + -89] + 19];
[ap + -7] = [[ap + -89] + 20];
[ap + -6] = [[ap + -89] + 21];
[ap + -5] = [[ap + -89] + 22];
[ap + -4] = [[ap + -89] + 23];
[ap + -3] = [[ap + -89] + 24];
[ap + -2] = [[ap + -89] + 25];
[ap + -1] = [[ap + -89] + 26];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107152796640107, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 28821964104807730, ap++;
[ap + -9] = [[ap + -99] + 27];
[ap + -8] = [[ap + -99] + 28];
[ap + -7] = [[ap + -99] + 29];
[ap + -6] = [[ap + -99] + 30];
[ap + -5] = [[ap + -99] + 31];
[ap + -4] = [[ap + -99] + 32];
[ap + -3] = [[ap + -99] + 33];
[ap + -2] = [[ap + -99] + 34];
[ap + -1] = [[ap + -99] + 35];
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = 309102029792370999717748, ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -105] + 36, ap++;
[fp + 0] = [ap + -109];
[fp + 1] = [ap + -108];
call rel 2297;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + -5] = [[fp + -11] + 1];
[fp + 0] = [[fp + -11] + 2];
[fp + 1] = [[fp + -11] + 3];
[ap + -3] = [[fp + -11] + 4];
[ap + -2] = [[fp + -11] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [fp + -11] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
[ap + 0] = [[fp + -11] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 12;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [[fp + -4] + 1], ap++;
jmp rel 11;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[fp + 0] = [ap + -5];
[fp + 1] = [ap + -4];
jmp rel 53 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -3634;
call rel 3930;
[ap + 0] = [ap + -1] + 3929, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
call rel -3584;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7] + 5970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 84 if [ap + -2] != 0;
[ap + 0] = 926137786937080942066379705305780976156692330066586492942502267841683559500, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -2] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel -4946;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 73;
call rel 3767;
[ap + 0] = [ap + -1] + 3766, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 21770, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -88] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
call rel -5684;
ret;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
call rel -5689;
ret;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
call rel -5694;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 3713;
[ap + 0] = [ap + -1] + 3712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 18800, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
jmp rel 240;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 247;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -11] + 1], ap++;
[ap + -5] = [[fp + -11] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 207 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -11] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 2];
jmp rel 179;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 2];
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -11] + 3], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -11] + 4], ap++;
[ap + -5] = [[fp + -11] + 5];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 144 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -11] + 3];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -11] + 4];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
%{ memory[ap + 0] = memory[ap + -13] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -14] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 5];
jmp rel 118;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 5];
[ap + 0] = [fp + -6] + [ap + -16], ap++;
call rel 3624;
[ap + 0] = [ap + -1] + 3623, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
call rel -3898;
jmp rel 75 if [ap + -4] != 0;
[ap + 0] = 1334664777155929186801060013143550635909228974761917574271585221149587386350, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -2] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -17] = [[fp + -7] + 1];
[ap + -2] = [[fp + -7] + 2];
[ap + -3] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 3513;
[ap + 0] = [ap + -1] + 3512, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 15880, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
jmp rel 61;
call rel 3500;
[ap + 0] = [ap + -1] + 3499, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 15780, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
jmp rel 26;
call rel 3487;
[ap + 0] = [ap + -1] + 3486, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 17190, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
jmp rel 35;
call rel 3474;
[ap + 0] = [ap + -1] + 3473, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 17290, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
call rel 1792;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 3451;
[ap + 0] = [ap + -1] + 3450, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 18500, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
call rel 1775;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 112;
call rel 3424;
[ap + 0] = [ap + -1] + 3423, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -5], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
call rel -4097;
jmp rel 75 if [ap + -4] != 0;
[ap + 0] = 422073521398876225481035229297186717153911541103484599068011287805644405767, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -2] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -17] = [[fp + -6] + 1];
[ap + -2] = [[fp + -6] + 2];
[ap + -3] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 1648;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 9;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -7807;
jmp rel 401 if [ap + -8] != 0;
jmp rel 363 if [ap + -5] != 0;
[fp + 1] = [ap + -4];
[fp + 2] = [ap + -3];
[fp + 3] = [ap + -2];
[fp + 4] = [ap + -1];
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 318;
[fp + 5] = [[ap + -8] + 0];
%{ memory[ap + 0] = (memory[fp + 5] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 5] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 292 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 5] = [[ap + -12] + 0];
[ap + 0] = [fp + 5] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 270;
[fp + 6] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 6] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 6] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -22] + 3], ap++;
[ap + -5] = [[ap + -23] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 6] = [[ap + -17] + 2];
[ap + 0] = [fp + 6] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -18] + 3];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 222;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -27] + 5], ap++;
[ap + -5] = [[ap + -28] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 196 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -22] + 4];
[ap + 0] = [fp + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 145;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 1516;
jmp rel 99 if [ap + -6] != 0;
jmp rel 90 if [ap + -3] != 0;
[fp + 7] = [ap + -2];
[fp + 8] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 76;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
call rel 1493;
jmp rel 31 if [ap + -6] != 0;
jmp rel 23 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 500, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 199;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3270, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 161;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 3750, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 39;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -26] + 6, ap++;
[ap + 0] = [ap + -26] + 7120, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -28] + 6850, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 41;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -21] + 8050, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -23] + 7880, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 24;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -16] + 9080, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 16;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 8910, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 7;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 10210, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 10870, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = 39878429859757942499084499860145094553463, ap++;
call rel -6557;
ret;
[ap + 0] = 39878429859761676908720221312622923640695, ap++;
call rel -6562;
ret;
ap += 2;
%{ memory[ap + 0] = 15180 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768196276, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 59;
[fp + -7] = [ap + 0] + 15180, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 42;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 10], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 12;
[fp + 1] = [fp + -5];
call rel 1289;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -47;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 15880, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -9620;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 1318;
[ap + 0] = 1062799989286861497646673457769309433976004466846907043354399004328696077865, ap++;
[ap + 0] = 457678164607650546261428908328985027973961829733116661231331606034355123914, ap++;
[ap + 0] = [fp + -7], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[fp + 0] = [ap + -9];
[fp + 1] = [ap + -9] + 3;
call rel -9281;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -5] = [[fp + -8] + 1];
[fp + 0] = [[fp + -8] + 2];
[fp + 1] = [[fp + -8] + 3];
[ap + -3] = [[fp + -8] + 4];
[ap + -2] = [[fp + -8] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 8], ap++;
[ap + 0] = [[fp + -8] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel [fp + -12];
jmp rel 67;
jmp rel 56;
jmp rel 45;
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 55;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 46;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 37;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 19;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 10;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -13] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[fp + -11] = [[ap + -1] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
call rel 1234;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 6040 <= memory[fp + -14] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -14] + 340282366920938463463374607431768205416, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 112;
[fp + -14] = [ap + 0] + 6040, ap++;
[ap + -1] = [[fp + -15] + 0];
[fp + -12] = [ap + 0] + [fp + -13], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -11] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -15] + 1];
jmp rel 60;
[ap + 1] = [fp + -11] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -15] + 1];
[ap + 0] = [[fp + -13] + 0], ap++;
[ap + 0] = [[fp + -13] + 1], ap++;
[ap + 0] = [[fp + -13] + 2], ap++;
[ap + 0] = [[fp + -13] + 3], ap++;
[ap + 0] = [[fp + -13] + 4], ap++;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [[fp + -13] + 6], ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
[ap + 0] = [[fp + -13] + 9], ap++;
[ap + 0] = [[fp + -13] + 10], ap++;
[ap + 0] = [[fp + -13] + 11], ap++;
[ap + -12] = [[fp + -9] + 0];
[ap + -11] = [[fp + -9] + 1];
[ap + -10] = [[fp + -9] + 2];
[ap + -9] = [[fp + -9] + 3];
[ap + -8] = [[fp + -9] + 4];
[ap + -7] = [[fp + -9] + 5];
[ap + -6] = [[fp + -9] + 6];
[ap + -5] = [[fp + -9] + 7];
[ap + -4] = [[fp + -9] + 8];
[ap + -3] = [[fp + -9] + 9];
[ap + -2] = [[fp + -9] + 10];
[ap + -1] = [[fp + -9] + 11];
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + -5] = [[fp + -6] + 0];
[ap + -4] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[ap + -1] = [[fp + -6] + 4];
[ap + 0] = [fp + -15] + 2, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -13] + 12, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9] + 12, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -80;
ret;
call rel -1226;
[ap + 0] = [fp + -15] + 2, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -3] + 6740, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
ret;
call rel -9931;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 127;
[ap + -1] = [[fp + -4] + 0];
ap += 1;
%{ memory[ap + 0] = memory[ap + -2] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 113;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 6;
[ap + -10] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4] * 340282366920938463463374607431768211456, ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
jmp rel 121;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 112;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 6;
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
call rel 859;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 31 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 31, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 344;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211425, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010271, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 325;
jmp rel 314;
jmp rel 303;
jmp rel 292;
jmp rel 281;
jmp rel 270;
jmp rel 259;
jmp rel 248;
jmp rel 237;
jmp rel 226;
jmp rel 215;
jmp rel 204;
jmp rel 193;
jmp rel 182;
jmp rel 171;
jmp rel 160;
jmp rel 149;
jmp rel 138;
jmp rel 127;
jmp rel 116;
jmp rel 105;
jmp rel 94;
jmp rel 83;
jmp rel 72;
jmp rel 61;
jmp rel 50;
jmp rel 39;
jmp rel 28;
jmp rel 17;
jmp rel 6;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel 276;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 256, ap++;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 65536, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 16777216, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 4294967296, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1099511627776, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 281474976710656, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 72057594037927936, ap++;
[ap + 0] = 4722366482869645213696, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 18446744073709551616, ap++;
[ap + 0] = 18446744073709551616, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 4722366482869645213696, ap++;
[ap + 0] = 72057594037927936, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
[ap + 0] = 281474976710656, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
[ap + 0] = 1099511627776, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
[ap + 0] = 4294967296, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
[ap + 0] = 16777216, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
[ap + 0] = 65536, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = 256, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 256, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 65536, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 16777216, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4294967296, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1099511627776, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 281474976710656, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 72057594037927936, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 18446744073709551616, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4722366482869645213696, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
ret;
ap += 2;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1995392260568499387643902728889710, ap++;
call rel -7586;
ret;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
call rel -7591;
ret;
%{ memory[ap + 0] = 1570 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209886, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 33;
[fp + -7] = [ap + 0] + 1570, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -26;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2270, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -10621;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -11] = [ap + 0] + [fp + -12], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -57;
jmp rel 34 if [ap + -3] != 0;
[fp + -10] = [[ap + -1] + 0];
[fp + -9] = [[ap + -1] + 1];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[ap + -2] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
call rel -72;
jmp rel 12 if [ap + -3] != 0;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -7] = [[ap + -1] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [[ap + -2] + 1];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
call rel -10316;
jmp rel 31 if [ap + -3] != 0;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 9, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 359;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 1637577033762547024928219503506405592178450804, ap++;
call rel -7748;
ret;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
call rel -7753;
ret;
%{ memory[ap + 0] = 10710 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768200746, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 114;
[fp + -8] = [ap + 0] + 10710, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 11610, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 67;
[ap + 0] = [[fp + -7] + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 10;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [ap + -4] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 371;
jmp rel 26 if [ap + -6] != 0;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -6] = [[fp + -4] + 0];
[ap + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
[ap + -1] = [[fp + -4] + 5];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -78;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -52] + 2970, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 20;
[ap + 0] = [ap + -4] + 10210, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -4] + 10490, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -10864;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
jmp rel [fp + -16];
jmp rel 51;
jmp rel 15;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17] + 10710, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel -327;
jmp rel 13 if [ap + -3] != 0;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 7540, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 768;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel [fp + -6];
jmp rel 60;
jmp rel 50;
jmp rel 40;
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 48;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 40;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 32;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -5] = [[ap + -1] + 0];
[fp + -4] = [[ap + -1] + 1];
[fp + -3] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
[fp + -11] = [ap + 0] + [fp + -12], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -456;
jmp rel 16 if [ap + -3] != 0;
[fp + -10] = [[ap + -1] + 0];
[fp + -9] = [[ap + -1] + 1];
[fp + -8] = [[ap + -1] + 2];
[fp + -7] = [[ap + -1] + 3];
[fp + -6] = [[ap + -1] + 4];
[fp + -5] = [[ap + -1] + 5];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 573087285299505011920718992710461799, ap++;
call rel -8077;
ret;
ap += 11;
%{ memory[ap + 0] = 13590 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768197866, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 83;
[fp + -7] = [ap + 0] + 13590, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 66;
[fp + 2] = [[fp + -6] + 0];
[fp + 3] = [[fp + -6] + 1];
[fp + 4] = [[fp + -6] + 2];
[fp + 5] = [[fp + -6] + 3];
[fp + 6] = [[fp + -6] + 4];
[fp + 7] = [[fp + -6] + 5];
[fp + 8] = [[fp + -6] + 6];
[fp + 9] = [[fp + -6] + 7];
[fp + 10] = [[fp + -6] + 8];
[fp + 2] = [[fp + -3] + 0];
[fp + 4] = [ap + 0] + [fp + 3], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6] + 9;
[fp + 1] = [fp + -5];
call rel -10730;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 657;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -64;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 14290, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -11159;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 529;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 67 if [ap + -3] != 0;
ap += 22;
[ap + -23] = [ap + 0] + [ap + -24], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -25] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 470;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 463;
[ap + -3] = [ap + 0] + 1, ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 200;
[ap + 0] = [[ap + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 174 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 150;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 124 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 74 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 50;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 26 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 7];
ap += 4;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 307;
ap += 8;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 299;
ap += 7;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 290;
ap += 15;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 282;
ap += 14;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 273;
ap += 22;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 265;
ap += 21;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 256;
ap += 29;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 249;
ap += 1;
[ap + -5] = [ap + 0] + 2, ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 499;
jmp rel 16 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 12;
[ap + -18] = [ap + 0] + 3, ap++;
jmp rel 110 if [ap + -1] != 0;
[ap + -17] = [ap + 0] + [ap + -18], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 98;
[ap + 0] = [[ap + -19] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 72 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 50;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 26 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 116;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 108;
ap += 6;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 99;
ap += 14;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 92;
ap += 5;
[ap + -24] = [ap + 0] + 4, ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + -23] = [ap + 0] + [ap + -24], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -25] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 32;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 25;
ap += 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 34;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -14] = [ap + 0] + [fp + -15], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -1145;
jmp rel 43 if [ap + -3] != 0;
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[fp + -13] = [[ap + -2] + 0];
[fp + -12] = [[ap + -2] + 1];
[fp + -11] = [[ap + -2] + 2];
[fp + -10] = [[ap + -2] + 3];
[fp + -9] = [[ap + -2] + 4];
[ap + -1] = [ap + 0] * 6, ap++;
[ap + -1] = [[ap + -3] + 5];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 6, ap++;
call rel 338;
jmp rel 16 if [ap + -3] != 0;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 6, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 323;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel [fp + -10];
jmp rel 151;
jmp rel 134;
jmp rel 114;
jmp rel 94;
jmp rel 53;
jmp rel 13;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -11] + 5350, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 123;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -11438;
jmp rel 16 if [ap + -3] != 0;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 9, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel -763;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -11476;
jmp rel 17 if [ap + -3] != 0;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 7, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 90, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 294;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + -2] = [ap + 0] * 6, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 3160, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 342;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + -2] = [ap + 0] * 6, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 3160, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 324;
ret;
[ap + 0] = 5, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -11] + 5450, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
[ap + 0] = 6, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + -2] = [ap + 0] * 6, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 292;
jmp rel 12 if [ap + -3] != 0;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2460, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 104;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 3;
[ap + 0] = 7, ap++;
jmp rel 28;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 2;
[ap + 0] = 5, ap++;
jmp rel 18;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 1;
[ap + 0] = 3, ap++;
jmp rel 8;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 46;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 2147483648, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 4;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 22;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 15;
ap += 12;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 16;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 4970 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206486, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 64;
[fp + -7] = [ap + 0] + 4970, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 47;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 11 if [ap + -6] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -9] + 100, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 175;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -57;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 5670, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -12155;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 9820 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768201636, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 9820, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6] + 7;
[fp + 1] = [fp + -5];
call rel -419;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 10520, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -12228;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 9620 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768201836, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 53;
[fp + -7] = [ap + 0] + 9620, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 36;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 6;
[fp + 1] = [fp + -5];
call rel -489;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -41;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 10320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -12298;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel [fp + -9];
jmp rel 87;
jmp rel 74;
jmp rel 27;
jmp rel 12;
ap += 3;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[fp + -6] = [[fp + -3] + 3];
[fp + -5] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel [fp + -6];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
ap += 3;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -6] = [[fp + -3] + 1];
[fp + -5] = [[fp + -3] + 2];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 3;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
