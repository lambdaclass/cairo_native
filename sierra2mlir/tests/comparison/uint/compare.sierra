type u8 = u8;
type RangeCheck = RangeCheck;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type u16 = u16;
type u32 = u32;
type u64 = u64;
type u128 = u128;
type Tuple<u8, u8, core::bool, core::bool> = Struct<ut@Tuple, u8, u8, core::bool, core::bool>;
type Tuple<u16, u16, core::bool, core::bool> = Struct<ut@Tuple, u16, u16, core::bool, core::bool>;
type Tuple<u32, u32, core::bool, core::bool> = Struct<ut@Tuple, u32, u32, core::bool, core::bool>;
type Tuple<u64, u64, core::bool, core::bool> = Struct<ut@Tuple, u64, u64, core::bool, core::bool>;
type Tuple<u128, u128, core::bool, core::bool> = Struct<ut@Tuple, u128, u128, core::bool, core::bool>;
type Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>> = Struct<ut@Tuple, Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>;

libfunc u8_const<2> = u8_const<2>;
libfunc u8_const<4> = u8_const<4>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc function_call<user@compare::compare::min_u8> = function_call<user@compare::compare::min_u8>;
libfunc u8_const<5> = u8_const<5>;
libfunc function_call<user@compare::compare::min_eq_u8> = function_call<user@compare::compare::min_eq_u8>;
libfunc function_call<user@compare::compare::eq_u8> = function_call<user@compare::compare::eq_u8>;
libfunc u8_const<3> = u8_const<3>;
libfunc u16_const<2> = u16_const<2>;
libfunc u16_const<4> = u16_const<4>;
libfunc store_temp<u16> = store_temp<u16>;
libfunc function_call<user@compare::compare::min_u16> = function_call<user@compare::compare::min_u16>;
libfunc u16_const<6> = u16_const<6>;
libfunc function_call<user@compare::compare::min_eq_u16> = function_call<user@compare::compare::min_eq_u16>;
libfunc function_call<user@compare::compare::eq_u16> = function_call<user@compare::compare::eq_u16>;
libfunc u16_const<3> = u16_const<3>;
libfunc u32_const<2> = u32_const<2>;
libfunc u32_const<4> = u32_const<4>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc function_call<user@compare::compare::min_u32> = function_call<user@compare::compare::min_u32>;
libfunc u32_const<7> = u32_const<7>;
libfunc function_call<user@compare::compare::min_eq_u32> = function_call<user@compare::compare::min_eq_u32>;
libfunc function_call<user@compare::compare::eq_u32> = function_call<user@compare::compare::eq_u32>;
libfunc u32_const<3> = u32_const<3>;
libfunc u64_const<2> = u64_const<2>;
libfunc u64_const<4> = u64_const<4>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc function_call<user@compare::compare::min_u64> = function_call<user@compare::compare::min_u64>;
libfunc u64_const<8> = u64_const<8>;
libfunc function_call<user@compare::compare::min_eq_u64> = function_call<user@compare::compare::min_eq_u64>;
libfunc function_call<user@compare::compare::eq_u64> = function_call<user@compare::compare::eq_u64>;
libfunc u64_const<3> = u64_const<3>;
libfunc u128_const<2> = u128_const<2>;
libfunc u128_const<4> = u128_const<4>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc function_call<user@compare::compare::min_u128> = function_call<user@compare::compare::min_u128>;
libfunc u128_const<9> = u128_const<9>;
libfunc function_call<user@compare::compare::min_eq_u128> = function_call<user@compare::compare::min_eq_u128>;
libfunc function_call<user@compare::compare::eq_u128> = function_call<user@compare::compare::eq_u128>;
libfunc u128_const<3> = u128_const<3>;
libfunc struct_construct<Tuple<u8, u8, core::bool, core::bool>> = struct_construct<Tuple<u8, u8, core::bool, core::bool>>;
libfunc struct_construct<Tuple<u16, u16, core::bool, core::bool>> = struct_construct<Tuple<u16, u16, core::bool, core::bool>>;
libfunc struct_construct<Tuple<u32, u32, core::bool, core::bool>> = struct_construct<Tuple<u32, u32, core::bool, core::bool>>;
libfunc struct_construct<Tuple<u64, u64, core::bool, core::bool>> = struct_construct<Tuple<u64, u64, core::bool, core::bool>>;
libfunc struct_construct<Tuple<u128, u128, core::bool, core::bool>> = struct_construct<Tuple<u128, u128, core::bool, core::bool>>;
libfunc struct_construct<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>> = struct_construct<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>>;
libfunc store_temp<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>> = store_temp<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>>;
libfunc dup<u8> = dup<u8>;
libfunc u8_lt = u8_lt;
libfunc branch_align = branch_align;
libfunc drop<u8> = drop<u8>;
libfunc jump = jump;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<u8> = rename<u8>;
libfunc u8_le = u8_le;
libfunc u8_eq = u8_eq;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc dup<u16> = dup<u16>;
libfunc u16_lt = u16_lt;
libfunc drop<u16> = drop<u16>;
libfunc rename<u16> = rename<u16>;
libfunc u16_le = u16_le;
libfunc u16_eq = u16_eq;
libfunc dup<u32> = dup<u32>;
libfunc u32_lt = u32_lt;
libfunc drop<u32> = drop<u32>;
libfunc rename<u32> = rename<u32>;
libfunc u32_le = u32_le;
libfunc u32_eq = u32_eq;
libfunc dup<u64> = dup<u64>;
libfunc u64_lt = u64_lt;
libfunc drop<u64> = drop<u64>;
libfunc rename<u64> = rename<u64>;
libfunc u64_le = u64_le;
libfunc u64_eq = u64_eq;
libfunc dup<u128> = dup<u128>;
libfunc u128_lt = u128_lt;
libfunc drop<u128> = drop<u128>;
libfunc rename<u128> = rename<u128>;
libfunc u128_le = u128_le;
libfunc u128_eq = u128_eq;

u8_const<2>() -> ([1]);
u8_const<4>() -> ([2]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<u8>([1]) -> ([6]);
store_temp<u8>([2]) -> ([7]);
function_call<user@compare::compare::min_u8>([5], [6], [7]) -> ([3], [4]);
u8_const<2>() -> ([8]);
u8_const<5>() -> ([9]);
store_temp<RangeCheck>([3]) -> ([12]);
store_temp<u8>([8]) -> ([13]);
store_temp<u8>([9]) -> ([14]);
function_call<user@compare::compare::min_eq_u8>([12], [13], [14]) -> ([10], [11]);
u8_const<2>() -> ([15]);
u8_const<2>() -> ([16]);
store_temp<u8>([15]) -> ([18]);
store_temp<u8>([16]) -> ([19]);
function_call<user@compare::compare::eq_u8>([18], [19]) -> ([17]);
u8_const<2>() -> ([20]);
u8_const<3>() -> ([21]);
store_temp<u8>([20]) -> ([23]);
store_temp<u8>([21]) -> ([24]);
function_call<user@compare::compare::eq_u8>([23], [24]) -> ([22]);
u16_const<2>() -> ([25]);
u16_const<4>() -> ([26]);
store_temp<RangeCheck>([10]) -> ([29]);
store_temp<u16>([25]) -> ([30]);
store_temp<u16>([26]) -> ([31]);
function_call<user@compare::compare::min_u16>([29], [30], [31]) -> ([27], [28]);
u16_const<2>() -> ([32]);
u16_const<6>() -> ([33]);
store_temp<RangeCheck>([27]) -> ([36]);
store_temp<u16>([32]) -> ([37]);
store_temp<u16>([33]) -> ([38]);
function_call<user@compare::compare::min_eq_u16>([36], [37], [38]) -> ([34], [35]);
u16_const<2>() -> ([39]);
u16_const<2>() -> ([40]);
store_temp<u16>([39]) -> ([42]);
store_temp<u16>([40]) -> ([43]);
function_call<user@compare::compare::eq_u16>([42], [43]) -> ([41]);
u16_const<2>() -> ([44]);
u16_const<3>() -> ([45]);
store_temp<u16>([44]) -> ([47]);
store_temp<u16>([45]) -> ([48]);
function_call<user@compare::compare::eq_u16>([47], [48]) -> ([46]);
u32_const<2>() -> ([49]);
u32_const<4>() -> ([50]);
store_temp<RangeCheck>([34]) -> ([53]);
store_temp<u32>([49]) -> ([54]);
store_temp<u32>([50]) -> ([55]);
function_call<user@compare::compare::min_u32>([53], [54], [55]) -> ([51], [52]);
u32_const<2>() -> ([56]);
u32_const<7>() -> ([57]);
store_temp<RangeCheck>([51]) -> ([60]);
store_temp<u32>([56]) -> ([61]);
store_temp<u32>([57]) -> ([62]);
function_call<user@compare::compare::min_eq_u32>([60], [61], [62]) -> ([58], [59]);
u32_const<2>() -> ([63]);
u32_const<2>() -> ([64]);
store_temp<u32>([63]) -> ([66]);
store_temp<u32>([64]) -> ([67]);
function_call<user@compare::compare::eq_u32>([66], [67]) -> ([65]);
u32_const<2>() -> ([68]);
u32_const<3>() -> ([69]);
store_temp<u32>([68]) -> ([71]);
store_temp<u32>([69]) -> ([72]);
function_call<user@compare::compare::eq_u32>([71], [72]) -> ([70]);
u64_const<2>() -> ([73]);
u64_const<4>() -> ([74]);
store_temp<RangeCheck>([58]) -> ([77]);
store_temp<u64>([73]) -> ([78]);
store_temp<u64>([74]) -> ([79]);
function_call<user@compare::compare::min_u64>([77], [78], [79]) -> ([75], [76]);
u64_const<2>() -> ([80]);
u64_const<8>() -> ([81]);
store_temp<RangeCheck>([75]) -> ([84]);
store_temp<u64>([80]) -> ([85]);
store_temp<u64>([81]) -> ([86]);
function_call<user@compare::compare::min_eq_u64>([84], [85], [86]) -> ([82], [83]);
u64_const<2>() -> ([87]);
u64_const<2>() -> ([88]);
store_temp<u64>([87]) -> ([90]);
store_temp<u64>([88]) -> ([91]);
function_call<user@compare::compare::eq_u64>([90], [91]) -> ([89]);
u64_const<2>() -> ([92]);
u64_const<3>() -> ([93]);
store_temp<u64>([92]) -> ([95]);
store_temp<u64>([93]) -> ([96]);
function_call<user@compare::compare::eq_u64>([95], [96]) -> ([94]);
u128_const<2>() -> ([97]);
u128_const<4>() -> ([98]);
store_temp<RangeCheck>([82]) -> ([101]);
store_temp<u128>([97]) -> ([102]);
store_temp<u128>([98]) -> ([103]);
function_call<user@compare::compare::min_u128>([101], [102], [103]) -> ([99], [100]);
u128_const<2>() -> ([104]);
u128_const<9>() -> ([105]);
store_temp<RangeCheck>([99]) -> ([108]);
store_temp<u128>([104]) -> ([109]);
store_temp<u128>([105]) -> ([110]);
function_call<user@compare::compare::min_eq_u128>([108], [109], [110]) -> ([106], [107]);
u128_const<2>() -> ([111]);
u128_const<2>() -> ([112]);
store_temp<u128>([111]) -> ([114]);
store_temp<u128>([112]) -> ([115]);
function_call<user@compare::compare::eq_u128>([114], [115]) -> ([113]);
u128_const<2>() -> ([116]);
u128_const<3>() -> ([117]);
store_temp<u128>([116]) -> ([119]);
store_temp<u128>([117]) -> ([120]);
function_call<user@compare::compare::eq_u128>([119], [120]) -> ([118]);
struct_construct<Tuple<u8, u8, core::bool, core::bool>>([4], [11], [17], [22]) -> ([121]);
struct_construct<Tuple<u16, u16, core::bool, core::bool>>([28], [35], [41], [46]) -> ([122]);
struct_construct<Tuple<u32, u32, core::bool, core::bool>>([52], [59], [65], [70]) -> ([123]);
struct_construct<Tuple<u64, u64, core::bool, core::bool>>([76], [83], [89], [94]) -> ([124]);
struct_construct<Tuple<u128, u128, core::bool, core::bool>>([100], [107], [113], [118]) -> ([125]);
struct_construct<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>>([121], [122], [123], [124], [125]) -> ([126]);
store_temp<RangeCheck>([106]) -> ([127]);
store_temp<Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>>([126]) -> ([128]);
return([127], [128]);
dup<u8>([1]) -> ([1], [5]);
dup<u8>([2]) -> ([2], [6]);
u8_lt([0], [5], [6]) { fallthrough([3]) 127([4]) };
branch_align() -> ();
drop<u8>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u8>([2]) -> ([8]);
jump() { 131() };
branch_align() -> ();
drop<u8>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u8>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u8>([8]) -> ([10]);
return([9], [10]);
dup<u8>([1]) -> ([1], [5]);
dup<u8>([2]) -> ([2], [6]);
u8_le([0], [5], [6]) { fallthrough([3]) 142([4]) };
branch_align() -> ();
drop<u8>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u8>([2]) -> ([8]);
jump() { 146() };
branch_align() -> ();
drop<u8>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u8>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u8>([8]) -> ([10]);
return([9], [10]);
u8_eq([0], [1]) { fallthrough() 155() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 159() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
dup<u16>([1]) -> ([1], [5]);
dup<u16>([2]) -> ([2], [6]);
u16_lt([0], [5], [6]) { fallthrough([3]) 169([4]) };
branch_align() -> ();
drop<u16>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u16>([2]) -> ([8]);
jump() { 173() };
branch_align() -> ();
drop<u16>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u16>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u16>([8]) -> ([10]);
return([9], [10]);
dup<u16>([1]) -> ([1], [5]);
dup<u16>([2]) -> ([2], [6]);
u16_le([0], [5], [6]) { fallthrough([3]) 184([4]) };
branch_align() -> ();
drop<u16>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u16>([2]) -> ([8]);
jump() { 188() };
branch_align() -> ();
drop<u16>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u16>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u16>([8]) -> ([10]);
return([9], [10]);
u16_eq([0], [1]) { fallthrough() 197() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 201() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
dup<u32>([1]) -> ([1], [5]);
dup<u32>([2]) -> ([2], [6]);
u32_lt([0], [5], [6]) { fallthrough([3]) 211([4]) };
branch_align() -> ();
drop<u32>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u32>([2]) -> ([8]);
jump() { 215() };
branch_align() -> ();
drop<u32>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u32>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u32>([8]) -> ([10]);
return([9], [10]);
dup<u32>([1]) -> ([1], [5]);
dup<u32>([2]) -> ([2], [6]);
u32_le([0], [5], [6]) { fallthrough([3]) 226([4]) };
branch_align() -> ();
drop<u32>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u32>([2]) -> ([8]);
jump() { 230() };
branch_align() -> ();
drop<u32>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u32>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u32>([8]) -> ([10]);
return([9], [10]);
u32_eq([0], [1]) { fallthrough() 239() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 243() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
dup<u64>([1]) -> ([1], [5]);
dup<u64>([2]) -> ([2], [6]);
u64_lt([0], [5], [6]) { fallthrough([3]) 253([4]) };
branch_align() -> ();
drop<u64>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u64>([2]) -> ([8]);
jump() { 257() };
branch_align() -> ();
drop<u64>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u64>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u64>([8]) -> ([10]);
return([9], [10]);
dup<u64>([1]) -> ([1], [5]);
dup<u64>([2]) -> ([2], [6]);
u64_le([0], [5], [6]) { fallthrough([3]) 268([4]) };
branch_align() -> ();
drop<u64>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u64>([2]) -> ([8]);
jump() { 272() };
branch_align() -> ();
drop<u64>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u64>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u64>([8]) -> ([10]);
return([9], [10]);
u64_eq([0], [1]) { fallthrough() 281() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 285() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);
dup<u128>([1]) -> ([1], [5]);
dup<u128>([2]) -> ([2], [6]);
u128_lt([0], [5], [6]) { fallthrough([3]) 295([4]) };
branch_align() -> ();
drop<u128>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u128>([2]) -> ([8]);
jump() { 299() };
branch_align() -> ();
drop<u128>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u128>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u128>([8]) -> ([10]);
return([9], [10]);
dup<u128>([1]) -> ([1], [5]);
dup<u128>([2]) -> ([2], [6]);
u128_le([0], [5], [6]) { fallthrough([3]) 310([4]) };
branch_align() -> ();
drop<u128>([1]) -> ();
store_temp<RangeCheck>([3]) -> ([7]);
store_temp<u128>([2]) -> ([8]);
jump() { 314() };
branch_align() -> ();
drop<u128>([2]) -> ();
store_temp<RangeCheck>([4]) -> ([7]);
store_temp<u128>([1]) -> ([8]);
rename<RangeCheck>([7]) -> ([9]);
rename<u128>([8]) -> ([10]);
return([9], [10]);
u128_eq([0], [1]) { fallthrough() 323() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([4]);
jump() { 327() };
branch_align() -> ();
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 1>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([4]);
rename<core::bool>([4]) -> ([7]);
return([7]);

compare::compare::main@0([0]: RangeCheck) -> (RangeCheck, Tuple<Tuple<u8, u8, core::bool, core::bool>, Tuple<u16, u16, core::bool, core::bool>, Tuple<u32, u32, core::bool, core::bool>, Tuple<u64, u64, core::bool, core::bool>, Tuple<u128, u128, core::bool, core::bool>>);
compare::compare::min_u8@119([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, u8);
compare::compare::min_eq_u8@134([0]: RangeCheck, [1]: u8, [2]: u8) -> (RangeCheck, u8);
compare::compare::eq_u8@149([0]: u8, [1]: u8) -> (core::bool);
compare::compare::min_u16@161([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, u16);
compare::compare::min_eq_u16@176([0]: RangeCheck, [1]: u16, [2]: u16) -> (RangeCheck, u16);
compare::compare::eq_u16@191([0]: u16, [1]: u16) -> (core::bool);
compare::compare::min_u32@203([0]: RangeCheck, [1]: u32, [2]: u32) -> (RangeCheck, u32);
compare::compare::min_eq_u32@218([0]: RangeCheck, [1]: u32, [2]: u32) -> (RangeCheck, u32);
compare::compare::eq_u32@233([0]: u32, [1]: u32) -> (core::bool);
compare::compare::min_u64@245([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, u64);
compare::compare::min_eq_u64@260([0]: RangeCheck, [1]: u64, [2]: u64) -> (RangeCheck, u64);
compare::compare::eq_u64@275([0]: u64, [1]: u64) -> (core::bool);
compare::compare::min_u128@287([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, u128);
compare::compare::min_eq_u128@302([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, u128);
compare::compare::eq_u128@317([0]: u128, [1]: u128) -> (core::bool);

