type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type Tuple<core::bool, core::bool, core::bool, core::bool> = Struct<ut@Tuple, core::bool, core::bool, core::bool, core::bool>;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc bool_not_impl = bool_not_impl;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc struct_construct<Tuple<core::bool, core::bool, core::bool, core::bool>> = struct_construct<Tuple<core::bool, core::bool, core::bool, core::bool>>;
libfunc store_temp<Tuple<core::bool, core::bool, core::bool, core::bool>> = store_temp<Tuple<core::bool, core::bool, core::bool, core::bool>>;

struct_construct<Unit>() -> ([0]);
enum_init<core::bool, 1>([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
bool_not_impl([1]) -> ([2]);
store_temp<core::bool>([2]) -> ([2]);
bool_not_impl([2]) -> ([3]);
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 0>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
bool_not_impl([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([6]);
bool_not_impl([6]) -> ([7]);
struct_construct<Unit>() -> ([8]);
enum_init<core::bool, 1>([8]) -> ([9]);
store_temp<core::bool>([9]) -> ([9]);
bool_not_impl([9]) -> ([10]);
store_temp<core::bool>([10]) -> ([10]);
bool_not_impl([10]) -> ([11]);
store_temp<core::bool>([11]) -> ([11]);
bool_not_impl([11]) -> ([12]);
store_temp<core::bool>([12]) -> ([12]);
bool_not_impl([12]) -> ([13]);
struct_construct<Unit>() -> ([14]);
enum_init<core::bool, 0>([14]) -> ([15]);
store_temp<core::bool>([15]) -> ([15]);
bool_not_impl([15]) -> ([16]);
store_temp<core::bool>([16]) -> ([16]);
bool_not_impl([16]) -> ([17]);
store_temp<core::bool>([17]) -> ([17]);
bool_not_impl([17]) -> ([18]);
store_temp<core::bool>([18]) -> ([18]);
bool_not_impl([18]) -> ([19]);
struct_construct<Tuple<core::bool, core::bool, core::bool, core::bool>>([3], [7], [13], [19]) -> ([20]);
store_temp<Tuple<core::bool, core::bool, core::bool, core::bool>>([20]) -> ([21]);
return([21]);

not::not::main@0() -> (Tuple<core::bool, core::bool, core::bool, core::bool>);
