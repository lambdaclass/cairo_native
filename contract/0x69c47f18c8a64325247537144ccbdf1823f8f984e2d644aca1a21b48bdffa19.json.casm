%{ memory[ap + 0] = 4720 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206736, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 248;
[fp + -6] = [ap + 0] + 4720, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 224;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -4] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 3];
jmp rel 203;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -3] = [[fp + -8] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 171;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 4], ap++;
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 6];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -8] + 4];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 127;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + 3] = [[fp + -8] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 7];
jmp rel 100 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -8] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 3000;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 25812;
[ap + 0] = [ap + -1] + 25811, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 111650, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -30] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -31] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 6];
jmp rel 51;
[ap + -31] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 6];
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -23], ap++;
call rel 2961;
jmp rel 26 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -12] = [[ap + -1] + 0];
[ap + -11] = [[ap + -1] + 1];
[ap + -10] = [[ap + -1] + 2];
[ap + -9] = [[ap + -1] + 3];
[ap + -8] = [[ap + -1] + 4];
[ap + -7] = [[ap + -1] + 5];
[ap + -6] = [[ap + -1] + 6];
[ap + -5] = [[ap + -1] + 7];
[ap + -4] = [[ap + -1] + 8];
[ap + -3] = [[ap + -1] + 9];
[ap + -2] = [[ap + -1] + 10];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 11, ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -34], ap++;
jmp rel 61;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [ap + -24] + 930, ap++;
jmp rel 18;
[ap + 0] = [fp + -8] + 5, ap++;
[ap + 0] = [ap + -17] + 2240, ap++;
jmp rel 12;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -19] + 1700, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -12] + 3110, ap++;
call rel 3196;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -10] + 3310, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 4520, ap++;
call rel 3179;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3169;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 5;
%{ memory[ap + 0] = 7960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 302;
[fp + -6] = [ap + 0] + 7960, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 279;
[fp + 2] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 258;
%{
(value, scalar) = (memory[fp + 2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 2] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 227;
[fp + 4] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 4], ap++;
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 6];
jmp rel 200 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 4] = [[fp + -7] + 4];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 183;
[fp + 3] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 5], ap++;
[ap + 3] = [[fp + -7] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 3] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 7];
jmp rel 156 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 3] = [[fp + -7] + 5];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 130;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 3039;
jmp rel 106 if [ap + -6] != 0;
jmp rel 99 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 2708;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25522;
[ap + 0] = [ap + -1] + 25521, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 47470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 62;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
call rel 3105;
[fp + 0] = [ap + -5];
[fp + 1] = [ap + -4];
jmp rel 35 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 3338;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 88;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [ap + -19] + 4840, ap++;
call rel 3332;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -21] + 4200, ap++;
jmp rel 18;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -15] + 5500, ap++;
jmp rel 12;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -17] + 4960, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -11] + 6360, ap++;
call rel 2870;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 6560, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 7760, ap++;
call rel 2854;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2845;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
%{ memory[ap + 0] = 8260 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203196, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 327;
[fp + -6] = [ap + 0] + 8260, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 303;
[fp + 3] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -4] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 3];
jmp rel 282;
%{
(value, scalar) = (memory[fp + 3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -3] = [[fp + -8] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 250;
[fp + 5] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 5] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 4], ap++;
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 6];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 5] = [[fp + -8] + 4];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 206;
[fp + 4] = [[ap + -3] + 0];
%{ memory[ap + 0] = memory[fp + 4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + 4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 5], ap++;
[ap + 3] = [[fp + -8] + 6], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + 4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 7];
jmp rel 179 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 4] = [[fp + -8] + 5];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 152;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 2716;
jmp rel 127 if [ap + -6] != 0;
jmp rel 120 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 2385;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 25198;
[ap + 0] = [ap + -1] + 25197, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 122480, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 78;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
call rel 3079;
[fp + 2] = [ap + -17];
[fp + 0] = [ap + -16];
[fp + 1] = [ap + -15];
jmp rel 48 if [ap + -14] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -14] = [[ap + -1] + 0];
[ap + -13] = [[ap + -1] + 1];
[ap + -12] = [[ap + -1] + 2];
[ap + -11] = [[ap + -1] + 3];
[ap + -10] = [[ap + -1] + 4];
[ap + -9] = [[ap + -1] + 5];
[ap + -8] = [[ap + -1] + 6];
[ap + -7] = [[ap + -1] + 7];
[ap + -6] = [[ap + -1] + 8];
[ap + -5] = [[ap + -1] + 9];
[ap + -4] = [[ap + -1] + 10];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 11];
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 12, ap++;
call rel 2997;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 92;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1770, ap++;
jmp rel 16;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -19] + 5140, ap++;
call rel 2987;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [ap + -21] + 4500, ap++;
jmp rel 18;
[ap + 0] = [fp + -8] + 5, ap++;
[ap + 0] = [ap + -15] + 5800, ap++;
jmp rel 12;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -17] + 5260, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -11] + 6660, ap++;
call rel 2524;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -9] + 6860, ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 8060, ap++;
call rel 2507;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2497;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 11;
%{ memory[ap + 0] = 16570 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768194886, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 175;
[fp + -6] = [ap + 0] + 16570, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3376;
jmp rel 153 if [ap + -12] != 0;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -10];
[fp + 2] = [ap + -9];
[fp + 3] = [ap + -8];
[fp + 4] = [ap + -7];
[fp + 5] = [ap + -6];
[fp + 6] = [ap + -5];
[fp + 7] = [ap + -4];
[fp + 8] = [ap + -3];
[fp + 9] = [ap + -2];
[fp + 10] = [ap + -1];
[ap + -13] = [ap + 0] + [ap + -14], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 2134;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24948;
[ap + 0] = [ap + -1] + 24947, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 109460, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -97] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -98] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 105;
[ap + -98] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 85 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 3878;
jmp rel 64 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
call rel 4033;
jmp rel 39 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1254074017074475171384430419983034313718811929311188110826608799162214963686, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -235] + 0];
[ap + -237] = [[ap + -235] + 1];
[ap + -3] = [[ap + -235] + 2];
[ap + -2] = [[ap + -235] + 3];
[ap + -4] = [[ap + -235] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -235]) %}
[ap + 0] = [[ap + -235] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -236] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -241] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[ap + -238] + 5], ap++;
[ap + 0] = [ap + -239] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -241] + 7], ap++;
[ap + 0] = [[ap + -242] + 8], ap++;
ret;
[ap + 0] = [ap + -233], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -236], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -101], ap++;
jmp rel 16;
call rel 2309;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2300;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 17;
%{ memory[ap + 0] = 31910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768179546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 364;
[fp + -6] = [ap + 0] + 31910, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 340;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -9] + 950, ap++;
[ap + 0] = 13, ap++;
jmp rel 69;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [ap + -9] + 760, ap++;
[ap + 0] = 11, ap++;
jmp rel 57;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [ap + -9] + 570, ap++;
[ap + 0] = 9, ap++;
jmp rel 45;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 3;
[ap + 0] = [ap + -9] + 380, ap++;
[ap + 0] = 7, ap++;
jmp rel 33;
[ap + -4] = [ap + 0] + 4, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [ap + -9] + 190, ap++;
[ap + 0] = 5, ap++;
jmp rel 21;
[ap + -5] = [ap + 0] + 5, ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -6] = [ap + 0] + 6, ap++;
jmp rel 262 if [ap + -1] != 0;
[ap + 0] = [ap + -9] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 5] = [ap + -3];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 234;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 2], ap++;
[ap + -5] = [[fp + -7] + 3];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 211 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -7] + 1];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 2];
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
call rel 4390;
jmp rel 186 if [ap + -8] != 0;
jmp rel 173 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 4537;
[fp + 1] = [ap + -99];
[fp + 2] = [ap + -98];
[fp + 3] = [ap + -97];
[fp + 4] = [ap + -96];
jmp rel 151 if [ap + -12] != 0;
[fp + 6] = [ap + -11];
[fp + 7] = [ap + -10];
[fp + 8] = [ap + -9];
[fp + 9] = [ap + -8];
[fp + 10] = [ap + -7];
[fp + 11] = [ap + -6];
[fp + 12] = [ap + -5];
[fp + 13] = [ap + -4];
[fp + 14] = [ap + -3];
[fp + 15] = [ap + -2];
[fp + 16] = [ap + -1];
[ap + -13] = [ap + 0] + [ap + -14], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 121;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -22] + 0], ap++;
call rel 5083;
jmp rel 98 if [ap + -6] != 0;
jmp rel 91 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1787;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24601;
[ap + 0] = [ap + -1] + 24600, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 298000, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -15] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -16] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 52;
[ap + -16] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
call rel 5120;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 105;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1570, ap++;
jmp rel 14;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -106] + 4940, ap++;
call rel 5458;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5452;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2398;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -13] + 28310, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -6] + 29610, ap++;
call rel 1939;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9] + 30410, ap++;
jmp rel 6;
ap += 7;
[ap + 0] = [ap + -9] + 31640, ap++;
call rel 1925;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1915;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5040 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 126;
[fp + -6] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 103;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 5345;
jmp rel 79 if [ap + -6] != 0;
jmp rel 72 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 1552;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24366;
[ap + 0] = [ap + -1] + 24365, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 98630, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 35;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 5408;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 34;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 4840, ap++;
call rel 1779;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1770;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 198;
[fp + -6] = [ap + 0] + 2880, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 175;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 154;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1398;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24211;
[ap + 0] = [ap + -1] + 24210, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 105;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -18] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -4] = [[fp + -7] + 6], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 7];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 6], ap++;
[ap + -7] = [[fp + -7] + 7];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -12] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2680, ap++;
call rel 1562;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1553;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 3960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 203;
[fp + -6] = [ap + 0] + 3960, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 180;
[fp + 1] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 1] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 159;
%{
(value, scalar) = (memory[fp + 1], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 131;
[ap + 0] = [[ap + -3] + 0], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -11] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [ap + -3];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 1158;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23971;
[ap + 0] = [ap + -1] + 23970, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 86170, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -12] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -13] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 75;
[ap + -13] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 5261;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + -6] = [ap + 0] + [fp + 0], ap++;
call rel 5420;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 38;
call rel 1355;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 2560, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 3760, ap++;
call rel 1338;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1329;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 167;
[fp + -6] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 144;
[fp + 0] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 123;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 955;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23768;
[ap + 0] = [ap + -1] + 23767, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 85680, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 72;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 5058;
jmp rel 31 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
call rel 5420;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2770, ap++;
call rel 1150;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1141;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 167;
[fp + -6] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 144;
[fp + 0] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 123;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 767;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23580;
[ap + 0] = [ap + -1] + 23579, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 85680, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -17] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 4];
jmp rel 72;
[ap + -18] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -7] + 4];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 4870;
jmp rel 31 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
call rel 5367;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 26;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 2770, ap++;
call rel 962;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 953;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 166;
[fp + -6] = [ap + 0] + 5220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 143;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 5390;
jmp rel 119 if [ap + -6] != 0;
jmp rel 112 if [ap + -3] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 586;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23400;
[ap + 0] = [ap + -1] + 23399, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 62830, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 73;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 4692;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel 5435;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 34;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1650, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 5020, ap++;
call rel 775;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 766;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 166;
[fp + -6] = [ap + 0] + 5220, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 143;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 5203;
jmp rel 119 if [ap + -6] != 0;
jmp rel 112 if [ap + -3] != 0;
[fp + 0] = [ap + -2];
[fp + 1] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 399;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23213;
[ap + 0] = [ap + -1] + 23212, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 62830, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 73;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -2] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel 4505;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
call rel 5330;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 34;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1650, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 5020, ap++;
call rel 588;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 579;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 7840 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203616, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 232;
[fp + -6] = [ap + 0] + 7840, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 209;
[fp + 1] = [[fp + -4] + 0];
%{ memory[ap + 4] = memory[fp + 1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 1] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -4] = [[fp + -7] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 3];
jmp rel 188;
%{
(value, scalar) = (memory[fp + 1], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 1] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -3] = [[fp + -7] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 3];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 157;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 4] = memory[fp + 0] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 0] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -4] = [[fp + -7] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 6];
jmp rel 136;
%{
(value, scalar) = (memory[fp + 0], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 0] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 6];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 105;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 4954;
jmp rel 81 if [ap + -6] != 0;
jmp rel 74 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 152;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22966;
[ap + 0] = [ap + -1] + 22965, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 160190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -14] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 37;
[ap + -15] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 5181;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 76;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -19] + 4840, ap++;
call rel 801;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -17] + 5040, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -11] + 6240, ap++;
call rel 351;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -9] + 6440, ap++;
jmp rel 6;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -3] + 7640, ap++;
call rel 335;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 326;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
call rel 5207;
ret;
ap += 2;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 1] = [fp + -7] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -9] = [[fp + -6] + 1];
[ap + -2] = [[fp + -6] + 2];
[ap + -3] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 223 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 34 if [ap + -1] != 0;
call rel 5159;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -5] = [[fp + -6] + 8];
[fp + -5] = [[fp + -6] + 9];
[ap + -4] = [[fp + -6] + 10];
[ap + -3] = [[fp + -6] + 11];
[ap + -2] = [[fp + -6] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 14], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
call rel 5107;
[fp + 0] = [fp + -6] + 17;
jmp rel 97 if [ap + -7] != 0;
jmp rel 74 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 5223;
jmp rel 8 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 41;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 1
%}
[ap + -1] = [[ap + 0] + 0], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5] + 4770, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 5278;
ret;
call rel 5440;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -6] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
ret;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
call rel 4902;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
call rel 4897;
ret;
[ap + 0] = 375233589013918064796019, ap++;
call rel 4892;
ret;
%{ memory[ap + 0] = 5140 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768206316, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 95;
[fp + -8] = [ap + 0] + 5140, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 6040, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
call rel 5299;
jmp rel 25 if [ap + -6] != 0;
jmp rel 16 if [ap + -3] != 0;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 2, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -58;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1970, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 21;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -105;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 1] = [fp + -9] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -3] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 192 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
call rel 4728;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -5] = [[fp + -8] + 8];
[fp + -7] = [[fp + -8] + 9];
[ap + -4] = [[fp + -8] + 10];
[ap + -3] = [[fp + -8] + 11];
[ap + -2] = [[fp + -8] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 14], ap++;
jmp rel 144 if [ap + -1] != 0;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
call rel 4695;
[fp + 0] = [fp + -8] + 17;
jmp rel 123 if [ap + -7] != 0;
jmp rel 83 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 4811;
jmp rel 36 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 5153;
jmp rel 11 if [ap + -7] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8] * 4294967296, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 5218;
jmp rel 12 if [ap + -6] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 5070, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5002;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -8] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
ret;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
%{ memory[ap + 0] = 1570 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209886, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 33;
[fp + -7] = [ap + 0] + 1570, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -26;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2270, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -409;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
call rel 4473;
ret;
ap += 8;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -7] = [[fp + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 6] = [fp + -9] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -11] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -3] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 402 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 38 if [ap + -1] != 0;
call rel 4425;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 198245171877110614431632758327373800976566065571148526819123645061251396147, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -5] = [[fp + -8] + 8];
[fp + -7] = [[fp + -8] + 9];
[ap + -4] = [[fp + -8] + 10];
[ap + -3] = [[fp + -8] + 11];
[ap + -2] = [[fp + -8] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 14], ap++;
jmp rel 308 if [ap + -1] != 0;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
call rel 4369;
[fp + 7] = [fp + -8] + 17;
jmp rel 264 if [ap + -7] != 0;
jmp rel 132 if [ap + -6] != 0;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -10], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 10
%}
[ap + -10] = [[ap + 0] + 0], ap++;
[ap + -10] = [[ap + -1] + 1];
[ap + -9] = [[ap + -1] + 2];
[ap + -8] = [[ap + -1] + 3];
[ap + -7] = [[ap + -1] + 4];
[ap + -6] = [[ap + -1] + 5];
[ap + -5] = [[ap + -1] + 6];
[ap + -4] = [[ap + -1] + 7];
[ap + -3] = [[ap + -1] + 8];
[ap + -2] = [[ap + -1] + 9];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 4485;
jmp rel 62 if [ap + -5] != 0;
[fp + 4] = [ap + -2];
[fp + 5] = [ap + -1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 4825;
jmp rel 12 if [ap + -7] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 98;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 1
%}
[ap + -1] = [[ap + 0] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9] * 4294967296, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[fp + 2] = [ap + -11];
[fp + 3] = [ap + -11] + 1;
call rel 4839;
jmp rel 77 if [ap + -6] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 5070, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[fp + 0] = [ap + -9];
[fp + 1] = [ap + -8];
call rel 4459;
jmp rel 23 if [ap + -12] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
call rel 4535;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
ret;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -8] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
[ap + 0] = [[fp + -8] + 16], ap++;
ret;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 533;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 507 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 485;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 459 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 437;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 411 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 4];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 389;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 363 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 6];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 341;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 9], ap++;
[ap + -5] = [[fp + -5] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 315 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 9];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 293;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 10], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 11], ap++;
[ap + -5] = [[fp + -5] + 12];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 267 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 10];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 11];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 245;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 13], ap++;
[ap + -5] = [[fp + -5] + 14];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 219 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 12];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 13];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 197;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 14], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 15], ap++;
[ap + -5] = [[fp + -5] + 16];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 171 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 14];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 15];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 149;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 16], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 17], ap++;
[ap + -5] = [[fp + -5] + 18];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 123 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 16];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 17];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 101;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 18], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 19], ap++;
[ap + -5] = [[fp + -5] + 20];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 75 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 18];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 19];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 21], ap++;
[ap + -5] = [[fp + -5] + 22];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 20];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 21];
ap += 5;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -22], ap++;
ret;
[ap + 0] = [fp + -5] + 23, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 177;
ap += 8;
[ap + 0] = [fp + -5] + 20, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 169;
ap += 6;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 160;
ap += 14;
[ap + 0] = [fp + -5] + 18, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 152;
ap += 12;
[ap + 0] = [fp + -5] + 19, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 143;
ap += 20;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 135;
ap += 18;
[ap + 0] = [fp + -5] + 17, ap++;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 126;
ap += 26;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 118;
ap += 24;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = [ap + -36] + 1, ap++;
[ap + 0] = [ap + -36], ap++;
jmp rel 109;
ap += 32;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
jmp rel 101;
ap += 30;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [ap + -42] + 1, ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 92;
ap += 38;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 84;
ap += 36;
[ap + 0] = [fp + -5] + 11, ap++;
[ap + 0] = [ap + -48] + 1, ap++;
[ap + 0] = [ap + -48], ap++;
jmp rel 75;
ap += 44;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
jmp rel 67;
ap += 42;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -54] + 1, ap++;
[ap + 0] = [ap + -54], ap++;
jmp rel 58;
ap += 50;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -54], ap++;
jmp rel 50;
ap += 48;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -60] + 1, ap++;
[ap + 0] = [ap + -60], ap++;
jmp rel 41;
ap += 56;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
jmp rel 33;
ap += 54;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -66] + 1, ap++;
[ap + 0] = [ap + -66], ap++;
jmp rel 24;
ap += 62;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -66], ap++;
jmp rel 16;
ap += 60;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 68;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 2;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 0] = [fp + -5] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
[fp + 1] = [fp + -4] + 7;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 79 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 4070;
jmp rel 54 if [ap + -6] != 0;
jmp rel 41 if [ap + -1] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 43082822081847175470628674138746545522, ap++;
[ap + 0] = 16, ap++;
call rel 4192;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 4596;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4607;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -5] + 34750, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 256, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -12] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -12], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 0], ap++;
[ap + -2] = [[fp + -14] + 1], ap++;
[ap + -2] = [[fp + -14] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -12] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 3], ap++;
[ap + -1] = [[fp + -14] + 4], ap++;
[ap + -3] = [[fp + -14] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 6], ap++;
[ap + -3] = [[fp + -14] + 7], ap++;
[ap + -16] = [[fp + -14] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 544 if [ap + -17] != 0;
[ap + 1] = [fp + -13] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 9];
jmp rel 524;
[ap + -1] = [[fp + -14] + 9];
[ap + 0] = 65536, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -11] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -11], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 10], ap++;
[ap + -2] = [[fp + -14] + 11], ap++;
[ap + -2] = [[fp + -14] + 12];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -11] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 13], ap++;
[ap + -1] = [[fp + -14] + 14], ap++;
[ap + -3] = [[fp + -14] + 15];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 16], ap++;
[ap + -3] = [[fp + -14] + 17], ap++;
[ap + -16] = [[fp + -14] + 18];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 481 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 19];
jmp rel 467;
[ap + -1] = [[fp + -14] + 19];
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -10] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -10], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 20], ap++;
[ap + -2] = [[fp + -14] + 21], ap++;
[ap + -2] = [[fp + -14] + 22];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -10] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 23], ap++;
[ap + -1] = [[fp + -14] + 24], ap++;
[ap + -3] = [[fp + -14] + 25];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 26], ap++;
[ap + -3] = [[fp + -14] + 27], ap++;
[ap + -16] = [[fp + -14] + 28];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 424 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 29];
jmp rel 410;
[ap + -1] = [[fp + -14] + 29];
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -9] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -9], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 30], ap++;
[ap + -2] = [[fp + -14] + 31], ap++;
[ap + -2] = [[fp + -14] + 32];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -9] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 33], ap++;
[ap + -1] = [[fp + -14] + 34], ap++;
[ap + -3] = [[fp + -14] + 35];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 36], ap++;
[ap + -3] = [[fp + -14] + 37], ap++;
[ap + -16] = [[fp + -14] + 38];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 367 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 39];
jmp rel 353;
[ap + -1] = [[fp + -14] + 39];
[ap + 0] = 1099511627776, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -8] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -8], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 40], ap++;
[ap + -2] = [[fp + -14] + 41], ap++;
[ap + -2] = [[fp + -14] + 42];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 43], ap++;
[ap + -1] = [[fp + -14] + 44], ap++;
[ap + -3] = [[fp + -14] + 45];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 46], ap++;
[ap + -3] = [[fp + -14] + 47], ap++;
[ap + -16] = [[fp + -14] + 48];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 310 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 49];
jmp rel 296;
[ap + -1] = [[fp + -14] + 49];
[ap + 0] = 281474976710656, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -7] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -7], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 50], ap++;
[ap + -2] = [[fp + -14] + 51], ap++;
[ap + -2] = [[fp + -14] + 52];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -7] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 53], ap++;
[ap + -1] = [[fp + -14] + 54], ap++;
[ap + -3] = [[fp + -14] + 55];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 56], ap++;
[ap + -3] = [[fp + -14] + 57], ap++;
[ap + -16] = [[fp + -14] + 58];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 253 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 59];
jmp rel 239;
[ap + -1] = [[fp + -14] + 59];
[ap + 0] = 72057594037927936, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 60], ap++;
[ap + -2] = [[fp + -14] + 61], ap++;
[ap + -2] = [[fp + -14] + 62];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 63], ap++;
[ap + -1] = [[fp + -14] + 64], ap++;
[ap + -3] = [[fp + -14] + 65];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 66], ap++;
[ap + -3] = [[fp + -14] + 67], ap++;
[ap + -16] = [[fp + -14] + 68];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 196 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 69];
jmp rel 182;
[ap + -1] = [[fp + -14] + 69];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -5] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -5], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 70], ap++;
[ap + -2] = [[fp + -14] + 71], ap++;
[ap + -2] = [[fp + -14] + 72];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -5] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 73], ap++;
[ap + -1] = [[fp + -14] + 74], ap++;
[ap + -3] = [[fp + -14] + 75];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 76], ap++;
[ap + -3] = [[fp + -14] + 77], ap++;
[ap + -16] = [[fp + -14] + 78];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 139 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 79];
jmp rel 125;
[ap + -1] = [[fp + -14] + 79];
[ap + 0] = 1208925819614629174706176, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -4] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 80], ap++;
[ap + -2] = [[fp + -14] + 81], ap++;
[ap + -2] = [[fp + -14] + 82];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -4] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 83], ap++;
[ap + -1] = [[fp + -14] + 84], ap++;
[ap + -3] = [[fp + -14] + 85];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 86], ap++;
[ap + -3] = [[fp + -14] + 87], ap++;
[ap + -16] = [[fp + -14] + 88];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 82 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 89];
jmp rel 68;
[ap + -1] = [[fp + -14] + 89];
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -3] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -3], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 90], ap++;
[ap + -2] = [[fp + -14] + 91], ap++;
[ap + -2] = [[fp + -14] + 92];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -3] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -14] + 93], ap++;
[ap + -1] = [[fp + -14] + 94], ap++;
[ap + -3] = [[fp + -14] + 95];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -14] + 96], ap++;
[ap + -3] = [[fp + -14] + 97], ap++;
[ap + -16] = [[fp + -14] + 98];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 25 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 99];
jmp rel 13;
[ap + -1] = [[fp + -14] + 99];
ap += 10;
[ap + 0] = [fp + -14] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [fp + -14] + 100, ap++;
jmp rel 108;
ap += 3;
[ap + 0] = [fp + -14] + 99, ap++;
jmp rel 114;
ap += 20;
[ap + 0] = [fp + -14] + 90, ap++;
jmp rel 96;
ap += 23;
[ap + 0] = [fp + -14] + 89, ap++;
jmp rel 102;
ap += 40;
[ap + 0] = [fp + -14] + 80, ap++;
jmp rel 84;
ap += 43;
[ap + 0] = [fp + -14] + 79, ap++;
jmp rel 90;
ap += 60;
[ap + 0] = [fp + -14] + 70, ap++;
jmp rel 72;
ap += 63;
[ap + 0] = [fp + -14] + 69, ap++;
jmp rel 78;
ap += 80;
[ap + 0] = [fp + -14] + 60, ap++;
jmp rel 60;
ap += 83;
[ap + 0] = [fp + -14] + 59, ap++;
jmp rel 66;
ap += 100;
[ap + 0] = [fp + -14] + 50, ap++;
jmp rel 48;
ap += 103;
[ap + 0] = [fp + -14] + 49, ap++;
jmp rel 54;
ap += 120;
[ap + 0] = [fp + -14] + 40, ap++;
jmp rel 36;
ap += 123;
[ap + 0] = [fp + -14] + 39, ap++;
jmp rel 42;
ap += 140;
[ap + 0] = [fp + -14] + 30, ap++;
jmp rel 24;
ap += 143;
[ap + 0] = [fp + -14] + 29, ap++;
jmp rel 30;
ap += 160;
[ap + 0] = [fp + -14] + 20, ap++;
jmp rel 12;
ap += 163;
[ap + 0] = [fp + -14] + 19, ap++;
jmp rel 18;
ap += 180;
[ap + 0] = [fp + -14] + 10, ap++;
call rel 3998;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 183;
[ap + 0] = [fp + -14] + 9, ap++;
call rel 3991;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 131;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel 3973;
jmp rel 100 if [ap + -6] != 0;
jmp rel 91 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 64;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -15] + 1170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [[ap + -20] + 0], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 14;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 1210, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1710, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1910, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 24;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5280, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 547;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 521 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 497;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 471 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 447;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 421 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 397;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 371 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 347;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 9], ap++;
[ap + -5] = [[fp + -5] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 321 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 9];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 299;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 10], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 11], ap++;
[ap + -5] = [[fp + -5] + 12];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 273 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 10];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 11];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 251;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 13], ap++;
[ap + -5] = [[fp + -5] + 14];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 225 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 12];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 13];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 203;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 14], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 15], ap++;
[ap + -5] = [[fp + -5] + 16];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 177 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 14];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 15];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 155;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 16], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 17], ap++;
[ap + -5] = [[fp + -5] + 18];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 129 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 16];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 17];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 105;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 18], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 19], ap++;
[ap + -5] = [[fp + -5] + 20];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 79 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 18];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 19];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 55;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 21], ap++;
[ap + -5] = [[fp + -5] + 22];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 31 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 20];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 21];
ap += 4;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -22], ap++;
ret;
[ap + 0] = [fp + -5] + 23, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 177;
ap += 8;
[ap + 0] = [fp + -5] + 20, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 169;
ap += 7;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 160;
ap += 15;
[ap + 0] = [fp + -5] + 18, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 152;
ap += 14;
[ap + 0] = [fp + -5] + 19, ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 143;
ap += 22;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 135;
ap += 20;
[ap + 0] = [fp + -5] + 17, ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = [ap + -32], ap++;
jmp rel 126;
ap += 28;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
jmp rel 118;
ap += 26;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = [ap + -38] + 1, ap++;
[ap + 0] = [ap + -38], ap++;
jmp rel 109;
ap += 34;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
jmp rel 101;
ap += 32;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [ap + -44] + 1, ap++;
[ap + 0] = [ap + -44], ap++;
jmp rel 92;
ap += 40;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
jmp rel 84;
ap += 38;
[ap + 0] = [fp + -5] + 11, ap++;
[ap + 0] = [ap + -50] + 1, ap++;
[ap + 0] = [ap + -50], ap++;
jmp rel 75;
ap += 46;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
jmp rel 67;
ap += 45;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -57] + 1, ap++;
[ap + 0] = [ap + -57], ap++;
jmp rel 58;
ap += 53;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
jmp rel 50;
ap += 52;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -64], ap++;
jmp rel 41;
ap += 60;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
jmp rel 33;
ap += 59;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -71] + 1, ap++;
[ap + 0] = [ap + -71], ap++;
jmp rel 24;
ap += 67;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -71], ap++;
jmp rel 16;
ap += 66;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 74;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 28110 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768183346, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 82;
[fp + -8] = [ap + 0] + 28110, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 29010, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3334;
jmp rel 42 if [ap + -16] != 0;
jmp rel 26 if [ap + -13] != 0;
[ap + -12] = [[fp + -4] + 0];
[ap + -11] = [[fp + -4] + 1];
[ap + -10] = [[fp + -4] + 2];
[ap + -9] = [[fp + -4] + 3];
[ap + -8] = [[fp + -4] + 4];
[ap + -7] = [[fp + -4] + 5];
[ap + -6] = [[fp + -4] + 6];
[ap + -5] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -57;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 3470, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -3057;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 4;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -22] + 0];
[fp + -24] = [[fp + -22] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -22]) %}
[ap + 0] = [[fp + -22] + 3], ap++;
jmp rel 367 if [ap + -1] != 0;
[ap + 0] = [[fp + -22] + 4], ap++;
[ap + 0] = [fp + -25], ap++;
[ap + 0] = [[fp + -22] + 2], ap++;
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [fp + -22] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel -1616;
jmp rel 347 if [ap + -3] != 0;
jmp rel [fp + -21];
jmp rel 50;
jmp rel 42;
jmp rel 34;
jmp rel 26;
jmp rel 18;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -7] + 90, ap++;
[ap + 0] = 0, ap++;
jmp rel 37;
[ap + 0] = 4294967296, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 31;
[ap + 0] = 8589934592, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 25;
[ap + 0] = 12884901888, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 19;
[ap + 0] = 17179869184, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 13;
[ap + 0] = 21474836480, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 7;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
[ap + 0] = 1555170125836447351353653902862745931305207776976209346350698701924491819, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3459;
[fp + 0] = [ap + -462] + 3;
jmp rel 229 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -463] + 0];
[ap + -458] = [[ap + -463] + 1];
[ap + -2] = [[ap + -463] + 2];
[ap + -448] = [[ap + -463] + 3];
[ap + -3] = [[ap + -463] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -463]) %}
[ap + 0] = [[ap + -463] + 6], ap++;
jmp rel 207 if [ap + -1] != 0;
[ap + 0] = [[ap + -464] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -468] + 7];
[ap + -4] = [[ap + -468] + 8];
[ap + -3] = [[ap + -468] + 9];
[ap + -2] = [[ap + -468] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -468] + 7) %}
[ap + 0] = [[ap + -468] + 12], ap++;
jmp rel 183 if [ap + -1] != 0;
[fp + 3] = [[ap + -469] + 13];
[fp + 2] = [ap + -469] + 14;
%{ memory[ap + 4] = memory[fp + 3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -18] + 2];
jmp rel 154;
%{
(value, scalar) = (memory[fp + 3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -17] + 2];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] * 12, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [[ap + -478] + 11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 4111;
jmp rel 119 if [ap + -3] != 0;
[ap + 0] = 1043237155915217200023777142698719717442160588069512551429544266543089341477, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -6] = [[fp + 2] + 1];
[fp + 3] = [[fp + 2] + 2];
[ap + -2] = [[fp + 2] + 3];
[ap + -4] = [[fp + 2] + 4];
[ap + -3] = [[fp + 2] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 7], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 8], ap++;
[ap + 0] = [[fp + 2] + 9], ap++;
[fp + 1] = [fp + 2] + 10;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 65;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 2042;
jmp rel 42 if [ap + -6] != 0;
jmp rel 28 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
call rel 4250;
ret;
call rel 19175;
[ap + 0] = [ap + -1] + 19174, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 119660, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -2], ap++;
jmp rel 22;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + 2] + 6], ap++;
call rel 19153;
[ap + 0] = [ap + -1] + 19152, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 122930, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
call rel 1973;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 8], ap++;
[ap + 0] = [[fp + 2] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4446;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [[ap + -484] + 11], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [[ap + -470] + 11], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -472] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -474] + 13], ap++;
[ap + 0] = [[ap + -475] + 14], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -465] + 5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -467] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -469] + 7], ap++;
[ap + 0] = [[ap + -470] + 8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -457], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -25], ap++;
[ap + 0] = [[fp + -22] + 2], ap++;
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [fp + -22] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -22] + 4], ap++;
[ap + 0] = [[fp + -22] + 5], ap++;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492917, ap++;
call rel 1435;
ret;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
call rel 1430;
ret;
%{ memory[ap + 0] = 37680 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768173776, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 89;
[fp + -8] = [ap + 0] + 37680, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 38580, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 4351;
jmp rel 49 if [ap + -23] != 0;
jmp rel 33 if [ap + -20] != 0;
[ap + -19] = [[fp + -4] + 0];
[ap + -18] = [[fp + -4] + 1];
[ap + -17] = [[fp + -4] + 2];
[ap + -16] = [[fp + -4] + 3];
[ap + -15] = [[fp + -4] + 4];
[ap + -14] = [[fp + -4] + 5];
[ap + -13] = [[fp + -4] + 6];
[ap + -12] = [[fp + -4] + 7];
[ap + -11] = [[fp + -4] + 8];
[ap + -10] = [[fp + -4] + 9];
[ap + -9] = [[fp + -4] + 10];
[ap + -8] = [[fp + -4] + 11];
[ap + -7] = [[fp + -4] + 12];
[ap + -6] = [[fp + -4] + 13];
[ap + -5] = [[fp + -4] + 14];
[ap + -4] = [[fp + -4] + 15];
[ap + -3] = [[fp + -4] + 16];
[ap + -2] = [[fp + -4] + 17];
[ap + -1] = [[fp + -4] + 18];
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 19, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -64;
ret;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25] + 4170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -3561;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 5;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 241 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel -2120;
[fp + 1] = [ap + -5];
[fp + 4] = [ap + -4];
jmp rel 219 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 4684;
jmp rel 198 if [ap + -5] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 4] + 0];
[ap + -9] = [[fp + 4] + 1];
[ap + -3] = [[fp + 4] + 2];
[ap + -2] = [[fp + 4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 4]) %}
[ap + 0] = [[fp + 4] + 5], ap++;
jmp rel 175 if [ap + -1] != 0;
[fp + 3] = [[fp + 4] + 6];
[fp + 2] = [fp + 4] + 7;
%{ memory[ap + 4] = memory[fp + 3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + 3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 146;
%{
(value, scalar) = (memory[fp + 3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + 3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + -10] = [ap + 0] + [ap + -11], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [[fp + 4] + 4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 4728;
jmp rel 111 if [ap + -3] != 0;
[ap + 0] = 1069612565676098049371670206424910990441854040853550367722962445535705485641, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -6] = [[fp + 2] + 1];
[fp + 3] = [[fp + 2] + 2];
[ap + -2] = [[fp + 2] + 3];
[ap + -4] = [[fp + 2] + 4];
[ap + -3] = [[fp + 2] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 7], ap++;
jmp rel 88 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 8], ap++;
[ap + 0] = [[fp + 2] + 9], ap++;
[fp + 0] = [fp + 2] + 10;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 64;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel -3694;
jmp rel 41 if [ap + -6] != 0;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 4751;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 3010, ap++;
jmp rel 15;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 6280, ap++;
call rel 1585;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 8], ap++;
[ap + 0] = [[fp + 2] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4058;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [[fp + 4] + 4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[fp + 4] + 4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 4] + 6], ap++;
[ap + 0] = [[fp + 4] + 7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
ap += 2;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[fp + 0] = [fp + -5] + 3;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
[fp + 1] = [fp + -4] + 7;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 79 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 1708;
jmp rel 54 if [ap + -6] != 0;
jmp rel 41 if [ap + -1] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 43082822081847175470628674138746545522, ap++;
[ap + 0] = 16, ap++;
call rel 1830;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 2234;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 2245;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -5] + 34750, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[fp + -3] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 142 if [ap + -1] != 0;
jmp rel 65 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 589022817552792543318509852632045264175748210744615699137722900036442648072, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
jmp rel 12;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 592812847939322677565668720816539444019393425324860683642110029332411209997, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -7] = [[fp + -5] + 11];
[ap + -7] = [[fp + -5] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 14], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 15, ap++;
jmp rel 64;
ap += 3;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
[ap + 0] = [[fp + -5] + 16], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 14 if [ap + -4] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 589022817552792543318509852632045264175748210744615699137722900036442648072, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
jmp rel 12;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 592812847939322677565668720816539444019393425324860683642110029332411209997, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2] + 200, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -7] = [[fp + -5] + 11];
[ap + -7] = [[fp + -5] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 14], ap++;
jmp rel 19 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 3;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
[ap + 0] = [[fp + -5] + 16], ap++;
ret;
ap += 15;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -4] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 75 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 589022817552792543318509852632045264175748210744615699137722900036442648072, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
jmp rel 12;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 592812847939322677565668720816539444019393425324860683642110029332411209997, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[ap + -7] = [[fp + -4] + 11];
[ap + -7] = [[fp + -4] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 14], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 15], ap++;
[ap + 0] = [[fp + -4] + 16], ap++;
ret;
ap += 13;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
[ap + 0] = 812102049625239328877059852472148005149345189321026021198012755869152925610, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -4] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 75 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -3], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 589022817552792543318509852632045264175748210744615699137722900036442648072, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
jmp rel 12;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 592812847939322677565668720816539444019393425324860683642110029332411209997, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
[ap + -7] = [[fp + -4] + 11];
[ap + -7] = [[fp + -4] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 14], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 15], ap++;
[ap + 0] = [[fp + -4] + 16], ap++;
ret;
ap += 13;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
%{ memory[ap + 0] = 2680 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208776, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 91;
[fp + -8] = [ap + 0] + 2680, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 3580, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[fp + -7] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 3];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 3];
[ap + -6] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -65;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -4572;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 17922;
[ap + 0] = [ap + -1] + 17921, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28490, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 31;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel -411;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -40;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17870;
[ap + 0] = [ap + -1] + 17869, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28690, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4658;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17840;
[ap + 0] = [ap + -1] + 17839, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28490, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 31;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
call rel -358;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -40;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17788;
[ap + 0] = [ap + -1] + 17787, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28690, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4740;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 3;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -553;
jmp rel 124 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3841;
[fp + 0] = [ap + -5];
jmp rel 104 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 814182874304483309791743286124228493744277863724345952005546811777229850325, ap++;
[fp + 1] = [ap + -4];
[fp + 2] = [ap + -3];
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -9] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
[fp + -5] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 78 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 563027124402777014625093953982261603, ap++;
[ap + 0] = 15, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 309102034584004589806963, ap++;
[ap + 0] = 10, ap++;
call rel 3928;
jmp rel 45 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 563027124402777014625093953982261603, ap++;
[ap + 0] = 15, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 79130119626846975927743603, ap++;
[ap + 0] = 11, ap++;
call rel 4429;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -11] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
[ap + 0] = [[ap + -14] + 8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
[ap + 0] = 117999861104695822858408463129383551244204096177556094315754355, ap++;
call rel -9;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 4623;
jmp rel 15 if [ap + -6] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 37;
[ap + -38] = [ap + 0] + 1, ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 34;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 27;
ap += 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 50;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 92;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 73;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
jmp rel [ap + -2];
jmp rel 50;
jmp rel 42;
jmp rel 34;
jmp rel 26;
jmp rel 18;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -5] + 90, ap++;
[ap + 0] = 0, ap++;
jmp rel 37;
[ap + 0] = 4294967296, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
jmp rel 31;
[ap + 0] = 8589934592, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
jmp rel 25;
[ap + 0] = 12884901888, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
jmp rel 19;
[ap + 0] = 17179869184, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
jmp rel 13;
[ap + 0] = 21474836480, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
jmp rel 7;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -83;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2970, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -5161;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 3;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 4615;
[fp + 2] = [ap + -7];
jmp rel 121 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1254074017074475171384430419983034313718811929311188110826608799162214963686, ap++;
call rel 4708;
[fp + 0] = [ap + -14];
[fp + 1] = [ap + -13];
jmp rel 81 if [ap + -12] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 4810;
jmp rel 34 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 4937;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
call rel -448;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 56;
[fp + -8] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 2670, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 18;
[ap + 0] = [[fp + -7] + 0], ap++;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -43;
ret;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2370, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -5406;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 17088;
[ap + 0] = [ap + -1] + 17087, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 22380, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -11] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 77;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 48;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -8] + 0], ap++;
[ap + 0] = [[fp + -8] + 1], ap++;
call rel 5334;
jmp rel 18 if [ap + -3] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -49;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
call rel 17019;
[ap + 0] = [ap + -1] + 17018, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 22580, ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -5513;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
call rel 16977;
[ap + 0] = [ap + -1] + 16976, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 18190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 60;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 5366;
jmp rel 31 if [ap + -6] != 0;
jmp rel 16 if [ap + -2] != 0;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -43;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 3270, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
call rel -5607;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -7] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -7], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 0], ap++;
[ap + 3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -7] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8] + 940, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
jmp rel 7;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 10, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -6] + 0], ap++;
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -11] + 2];
jmp rel 16 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 790, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
jmp rel 7;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 19 if [ap + -2] != 0;
jmp rel 17 if [ap + -1] != 0;
call rel 5375;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 5355;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
jmp rel 12 if [fp + -3] != 0;
ap += 75;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 381;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 298;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 2];
jmp rel 272;
[ap + -1] = [[fp + -9] + 2];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 3];
jmp rel 29;
[ap + -1] = [[fp + -9] + 3];
ap += 1;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -3], ap++;
call rel 5449;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 23;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -6], ap++;
call rel 5425;
jmp rel 215 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 51 if [ap + -28] != 0;
ap += 32;
[ap + 0] = [fp + -6] * [ap + -33], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -40] + 0], ap++;
[ap + -4] = [[ap + -41] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -42] + 2];
jmp rel 17;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -39] + 0], ap++;
[ap + -3] = [[ap + -40] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -41] + 2];
ap += 1;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 6;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = 88068479653790488123916992367510505285, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -3] + 0], ap++;
[ap + 3] = [[ap + -4] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -8] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -3] + 0];
ap += 5;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -8] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -38], ap++;
call rel 5530;
jmp rel [ap + -3];
jmp rel 105;
jmp rel 35;
jmp rel 9;
ap += 8;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 49;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -14], memory[ap + -2]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -5] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -8] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -9] * [ap + -2];
[ap + -21] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -20] * [ap + -8], ap++;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2] + [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 25;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -13], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -20] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -1] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3] + [ap + -24], ap++;
[ap + 0] = [fp + -6] * [ap + -33], ap++;
[ap + 0] = [ap + -3] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -11] + 2];
jmp rel 17;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -10] + 2];
ap += 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 6;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = 88068479653790488123916992367510505285, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -75], ap++;
ret;
ap += 13;
call rel 5780;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
ret;
ap += 57;
call rel 5759;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 43;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 2];
jmp rel 29;
[ap + -1] = [[fp + -9] + 2];
ap += 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
call rel 5163;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 23;
ap += 3;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5139;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [ap + -78], ap++;
ret;
ap += 3;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 64;
call rel 5680;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 5658;
jmp rel 10 if [ap + -3] != 0;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 30828113188794245257250221355944970489240709081949230, ap++;
call rel -1315;
ret;
[ap + 0] = 39878429859757942499084499860145094553463, ap++;
call rel -1320;
ret;
[ap + 0] = 39878429859761676908720221312622923640695, ap++;
call rel -1325;
ret;
%{ memory[ap + 0] = 2680 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208776, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 91;
[fp + -8] = [ap + 0] + 2680, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 3580, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 49;
[ap + 0] = [[fp + -7] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -4] = [[fp + -9] + 2], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[fp + -9] + 3];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -3] = [[fp + -9] + 2], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[fp + -9] + 3];
[ap + -6] = [[fp + -4] + 0];
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -65;
ret;
[ap + 0] = [fp + -9] + 4, ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3] + 2880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -6318;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 281;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 50 if [ap + -1] != 0;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 36;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 22140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -20] + 0], ap++;
ret;
[ap + 0] = [fp + -5] + 21640, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 234;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 83 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -4165;
jmp rel 41 if [ap + -8] != 0;
jmp rel 32 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 14560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 14060, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 77;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 106 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5412;
jmp rel 64 if [ap + -15] != 0;
jmp rel 25 if [ap + -12] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 400, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 22140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + 22340, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
call rel 5679;
jmp rel 711 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12], ap++;
call rel 5673;
jmp rel 697 if [ap + -3] != 0;
[ap + 0] = 256, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 650 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 630;
[ap + -1] = [[ap + -24] + 9];
[ap + 0] = [ap + -24] + 10, ap++;
[ap + 0] = [fp + -11], ap++;
call rel 5621;
jmp rel 614 if [ap + -3] != 0;
[ap + 0] = 65536, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 567 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 553;
[ap + -1] = [[ap + -24] + 9];
[ap + 0] = [ap + -24] + 10, ap++;
[ap + 0] = [fp + -10], ap++;
call rel 5569;
jmp rel 537 if [ap + -3] != 0;
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 490 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 476;
[ap + -1] = [[ap + -24] + 9];
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -9] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -9], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -28] + 10], ap++;
[ap + -2] = [[ap + -29] + 11], ap++;
[ap + -2] = [[ap + -30] + 12];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -9] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -34] + 13], ap++;
[ap + -1] = [[ap + -35] + 14], ap++;
[ap + -3] = [[ap + -36] + 15];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -40] + 16], ap++;
[ap + -3] = [[ap + -41] + 17], ap++;
[ap + -16] = [[ap + -42] + 18];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 427 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 19];
jmp rel 413;
[ap + -1] = [[ap + -44] + 19];
[ap + 0] = 1099511627776, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -8] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -8], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -48] + 20], ap++;
[ap + -2] = [[ap + -49] + 21], ap++;
[ap + -2] = [[ap + -50] + 22];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -54] + 23], ap++;
[ap + -1] = [[ap + -55] + 24], ap++;
[ap + -3] = [[ap + -56] + 25];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -60] + 26], ap++;
[ap + -3] = [[ap + -61] + 27], ap++;
[ap + -16] = [[ap + -62] + 28];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 370 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -65] + 29];
jmp rel 356;
[ap + -1] = [[ap + -64] + 29];
[ap + 0] = 281474976710656, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -7] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -7], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -68] + 30], ap++;
[ap + -2] = [[ap + -69] + 31], ap++;
[ap + -2] = [[ap + -70] + 32];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -7] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -74] + 33], ap++;
[ap + -1] = [[ap + -75] + 34], ap++;
[ap + -3] = [[ap + -76] + 35];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -80] + 36], ap++;
[ap + -3] = [[ap + -81] + 37], ap++;
[ap + -16] = [[ap + -82] + 38];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 313 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -85] + 39];
jmp rel 299;
[ap + -1] = [[ap + -84] + 39];
[ap + 0] = 72057594037927936, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -88] + 40], ap++;
[ap + -2] = [[ap + -89] + 41], ap++;
[ap + -2] = [[ap + -90] + 42];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -94] + 43], ap++;
[ap + -1] = [[ap + -95] + 44], ap++;
[ap + -3] = [[ap + -96] + 45];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -100] + 46], ap++;
[ap + -3] = [[ap + -101] + 47], ap++;
[ap + -16] = [[ap + -102] + 48];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 256 if [ap + -17] != 0;
[ap + 1] = [ap + -19] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -105] + 49];
jmp rel 242;
[ap + -1] = [[ap + -104] + 49];
[ap + 0] = [ap + -104] + 50, ap++;
[ap + 0] = [fp + -5], ap++;
call rel 5486;
jmp rel 226 if [ap + -3] != 0;
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 179 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 165;
[ap + -1] = [[ap + -24] + 9];
[ap + 0] = [ap + -24] + 10, ap++;
[ap + 0] = [fp + -4], ap++;
call rel 5434;
jmp rel 149 if [ap + -3] != 0;
[ap + 0] = 1208925819614629174706176, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 102 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 88;
[ap + -1] = [[ap + -24] + 9];
[ap + 0] = [ap + -24] + 10, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 5382;
jmp rel 72 if [ap + -3] != 0;
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -2] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -4], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -8] + 0], ap++;
[ap + -2] = [[ap + -9] + 1], ap++;
[ap + -2] = [[ap + -10] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -8] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -14] + 3], ap++;
[ap + -1] = [[ap + -15] + 4], ap++;
[ap + -3] = [[ap + -16] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -20] + 6], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
[ap + -16] = [[ap + -22] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
jmp rel 25 if [ap + -17] != 0;
[ap + 1] = [ap + -50] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 9];
jmp rel 13;
[ap + -1] = [[ap + -24] + 9];
ap += 10;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 10, ap++;
jmp rel 179;
ap += 4;
call rel -951;
[ap + 0] = [ap + -34] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 30;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
ret;
ap += 51;
[ap + 0] = [ap + -76] + 10, ap++;
jmp rel 154;
ap += 55;
call rel -976;
[ap + 0] = [ap + -85] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 81;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -85], ap++;
ret;
ap += 102;
[ap + 0] = [ap + -127] + 10, ap++;
jmp rel 129;
ap += 106;
call rel -1001;
[ap + 0] = [ap + -136] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 132;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -136], ap++;
ret;
ap += 153;
[ap + 0] = [ap + -258] + 50, ap++;
jmp rel 104;
ap += 156;
[ap + 0] = [ap + -258] + 49, ap++;
jmp rel 36;
ap += 173;
[ap + 0] = [ap + -258] + 40, ap++;
jmp rel 92;
ap += 176;
[ap + 0] = [ap + -258] + 39, ap++;
jmp rel 24;
ap += 193;
[ap + 0] = [ap + -258] + 30, ap++;
jmp rel 80;
ap += 196;
[ap + 0] = [ap + -258] + 29, ap++;
jmp rel 12;
ap += 213;
[ap + 0] = [ap + -258] + 20, ap++;
jmp rel 68;
ap += 216;
[ap + 0] = [ap + -258] + 19, ap++;
call rel -1064;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 233;
[ap + 0] = [ap + -258] + 10, ap++;
jmp rel 50;
ap += 237;
call rel -1080;
[ap + 0] = [ap + -267] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 263;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -267], ap++;
ret;
ap += 284;
[ap + 0] = [ap + -309] + 10, ap++;
jmp rel 25;
ap += 288;
call rel -1105;
[ap + 0] = [ap + -318] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 314;
[ap + 0] = [ap + -318], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -318], ap++;
[ap + 0] = [ap + -318], ap++;
ret;
ap += 335;
[ap + 0] = [ap + -360] + 10, ap++;
call rel -1131;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 339;
call rel -1136;
[ap + 0] = [ap + -369] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 365;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = [ap + -369], ap++;
ret;
ap += 396;
[ap + 0] = [ap + -400], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -400], ap++;
[ap + 0] = [ap + -400], ap++;
ret;
ap += 17;
%{ memory[ap + 0] = 14420 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768197036, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 187;
[fp + -7] = [ap + 0] + 14420, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 170;
[fp + 0] = [fp + -6] + 12;
[fp + 1] = [fp + -5];
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 10], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
jmp rel [ap + -12];
jmp rel 55;
jmp rel 15;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + -2] = [[fp + -3] + 1];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -16] + 10500, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 107;
[fp + 13] = [ap + -4];
[fp + 14] = [ap + -3];
[fp + 15] = [ap + -2];
[fp + 16] = [ap + -1];
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + 14] = [ap + 0] + [fp + 13], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 4403;
jmp rel 12 if [ap + -3] != 0;
[fp + 15] = [[ap + -1] + 0];
[fp + 16] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6970, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
jmp rel 76;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + 2] = [ap + -11];
[fp + 3] = [ap + -10];
[fp + 4] = [ap + -9];
[fp + 5] = [ap + -8];
[fp + 6] = [ap + -7];
[fp + 7] = [ap + -6];
[fp + 8] = [ap + -5];
[fp + 9] = [ap + -4];
[fp + 10] = [ap + -3];
[fp + 11] = [ap + -2];
[fp + 12] = [ap + -1];
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + 3] = [ap + 0] + [fp + 2], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 4358;
jmp rel 64 if [ap + -3] != 0;
[fp + 10] = [ap + 0] + [fp + 9], ap++;
[fp + 4] = [[ap + -2] + 0];
[fp + 5] = [[ap + -2] + 1];
[fp + 6] = [[ap + -2] + 2];
[fp + 7] = [[ap + -2] + 3];
[fp + 8] = [[ap + -2] + 4];
[ap + -1] = [ap + 0] * 8, ap++;
[ap + -1] = [[ap + -3] + 5];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 6, ap++;
call rel 5124;
jmp rel 37 if [ap + -3] != 0;
[fp + 12] = [ap + 0] + [fp + 11], ap++;
[ap + -1] = [ap + 0] * 8, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 5109;
jmp rel 15 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -161;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 15120, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -7572;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 4;
jmp rel [fp + -21];
jmp rel 48;
jmp rel 40;
jmp rel 32;
jmp rel 24;
jmp rel 16;
jmp rel 8;
[ap + 0] = [fp + -24] + 200, ap++;
[ap + 0] = 0, ap++;
jmp rel 37;
[ap + 0] = 4294967296, ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 31;
[ap + 0] = 8589934592, ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 25;
[ap + 0] = 12884901888, ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 19;
[ap + 0] = 17179869184, ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 13;
[ap + 0] = 21474836480, ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
jmp rel 7;
[ap + 0] = 25769803776, ap++;
[ap + 0] = [fp + -24] + 100, ap++;
[ap + 0] = [ap + -2] + [fp + -20], ap++;
[fp + 3] = [ap + -1];
[ap + 0] = 1555170125836447351353653902862745931305207776976209346350698701924491819, ap++;
[ap + -1] = [[fp + -23] + 0];
[fp + 3] = [[fp + -23] + 1];
[ap + 0] = [[fp + -23] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -25] + 0], ap++;
[ap + -4] = [[fp + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -25] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -25] + 1], ap++;
[ap + -7] = [[fp + -25] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -25] + 3, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -1031;
[fp + 2] = [fp + -23] + 3;
jmp rel 144 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -22] + 0];
[ap + -458] = [[fp + -22] + 1];
[ap + -2] = [[fp + -22] + 2];
[ap + -448] = [[fp + -22] + 3];
[ap + -3] = [[fp + -22] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -22]) %}
[ap + 0] = [[fp + -22] + 6], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -22] + 5], ap++;
[ap + 0] = [fp + -22] + 7, ap++;
[ap + 0] = 1305529206446757794626433385883827655608344407302279304195976632702005615498, ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 5032;
jmp rel 85 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -8], ap++;
[fp + 0] = [fp + 3] * 4294967296;
[ap + 0] = [fp + 0], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = 1436209994116032968217460821259974301319484759399248048177294919499399378304, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 5197;
[fp + 1] = [ap + -6];
jmp rel 57 if [ap + -4] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 3055551908028526501914924269284987698957048785899022598052704863388955138917, ap++;
call rel 5382;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [fp + -21], ap++;
call rel 5449;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -22] + 5], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -22] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -22] + 7], ap++;
[ap + 0] = [[fp + -22] + 8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -457], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
call rel -2951;
ret;
ap += 17;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 386;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [fp + -5] + 950, ap++;
[ap + 0] = 13, ap++;
jmp rel 69;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [fp + -5] + 760, ap++;
[ap + 0] = 11, ap++;
jmp rel 57;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [fp + -5] + 570, ap++;
[ap + 0] = 9, ap++;
jmp rel 45;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 3;
[ap + 0] = [fp + -5] + 380, ap++;
[ap + 0] = 7, ap++;
jmp rel 33;
[ap + -4] = [ap + 0] + 4, ap++;
jmp rel 10 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [fp + -5] + 190, ap++;
[ap + 0] = 5, ap++;
jmp rel 21;
[ap + -5] = [ap + 0] + 5, ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -6] = [ap + 0] + 6, ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 11] = [ap + -3];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 284;
[fp + 12] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 12] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 12] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 258 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 12] = [[fp + -6] + 0];
[ap + 0] = [fp + 12] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
call rel -5737;
jmp rel 195 if [ap + -8] != 0;
jmp rel 141 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -5590;
[fp + 13] = [ap + -99];
[fp + 14] = [ap + -98];
[fp + 15] = [ap + -97];
[fp + 16] = [ap + -96];
jmp rel 123 if [ap + -12] != 0;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -10];
[fp + 2] = [ap + -9];
[fp + 3] = [ap + -8];
[fp + 4] = [ap + -7];
[fp + 5] = [ap + -6];
[fp + 6] = [ap + -5];
[fp + 7] = [ap + -4];
[fp + 8] = [ap + -3];
[fp + 9] = [ap + -2];
[fp + 10] = [ap + -1];
[ap + -13] = [ap + 0] + [ap + -14], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -22] + 0], ap++;
call rel -5044;
jmp rel 39 if [ap + -6] != 0;
jmp rel 31 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 500, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [fp + 12], ap++;
[ap + 0] = [fp + 13], ap++;
[ap + 0] = [fp + 14], ap++;
[ap + 0] = [fp + 15], ap++;
[ap + 0] = [fp + 16], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 68;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -106] + 3270, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 14;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -105] + 4560, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 7;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 19730, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -13] + 26740, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 22;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 27940, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 15;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 28740, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 30140, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 6960 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768204496, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 79;
[fp + -7] = [ap + 0] + 6960, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 60;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 10], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [[fp + -6] + 17], ap++;
[ap + 0] = [[fp + -6] + 18], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [fp + -6] + 19;
[fp + 1] = [fp + -5];
call rel 5069;
jmp rel 14 if [ap + -5] != 0;
[ap + -2] = [[fp + -3] + 0];
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel -61;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 7660, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -8377;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5210 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206246, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 5210, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 12, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6] + 2;
[fp + 1] = [fp + -5];
call rel -1047;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 5910, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -8454;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 4;
call rel 14044;
[ap + 0] = [ap + -1] + 14043, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 125130, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -9] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -9] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 114;
[fp + -9] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 80;
[fp + 0] = [fp + -6] + 19;
[fp + 1] = [fp + -5];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 57;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 10], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
[ap + 0] = [[fp + -6] + 16], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [[fp + -4] + 1], ap++;
[fp + 2] = [fp + -4] + 2;
[fp + 3] = [fp + -3];
call rel -942;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
call rel -72;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 13958;
[ap + 0] = [ap + -1] + 13957, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 124350, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 17;
ap += 1;
call rel 13941;
[ap + 0] = [ap + -1] + 13940, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 124720, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel -8594;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
call rel 13900;
[ap + 0] = [ap + -1] + 13899, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14780, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 102;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 77;
[ap + 0] = 1038721536386752126714616871058711680196540256345684263538672831881870690668, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [[fp + -6] + 0];
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -4] = [[fp + -8] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 2], ap++;
[ap + -7] = [[fp + -8] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -15] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -4] = [[fp + -5] + 3];
[ap + -2] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel -83;
ret;
[ap + 0] = [fp + -8] + 4, ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
call rel 13802;
[ap + 0] = [ap + -1] + 13801, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14980, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -8726;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1315925605, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + -2] = [[ap + -9] + 5];
[ap + -1] = [[ap + -9] + 6];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313472685977919867416164, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -17] + 7];
[ap + -6] = [[ap + -17] + 8];
[ap + -5] = [[ap + -17] + 9];
[ap + -4] = [[ap + -17] + 10];
[ap + -3] = [[ap + -17] + 11];
[ap + -2] = [[ap + -17] + 12];
[ap + -1] = [[ap + -17] + 13];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 71959718098290, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -25] + 14];
[ap + -6] = [[ap + -25] + 15];
[ap + -5] = [[ap + -25] + 16];
[ap + -4] = [[ap + -25] + 17];
[ap + -3] = [[ap + -25] + 18];
[ap + -2] = [[ap + -25] + 19];
[ap + -1] = [[ap + -25] + 20];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 20940711753708153, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -33] + 21];
[ap + -6] = [[ap + -33] + 22];
[ap + -5] = [[ap + -33] + 23];
[ap + -4] = [[ap + -33] + 24];
[ap + -3] = [[ap + -33] + 25];
[ap + -2] = [[ap + -33] + 26];
[ap + -1] = [[ap + -33] + 27];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1298232171, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -41] + 28];
[ap + -6] = [[ap + -41] + 29];
[ap + -5] = [[ap + -41] + 30];
[ap + -4] = [[ap + -41] + 31];
[ap + -3] = [[ap + -41] + 32];
[ap + -2] = [[ap + -41] + 33];
[ap + -1] = [[ap + -41] + 34];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 96092938071918, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -49] + 35];
[ap + -6] = [[ap + -49] + 36];
[ap + -5] = [[ap + -49] + 37];
[ap + -4] = [[ap + -49] + 38];
[ap + -3] = [[ap + -49] + 39];
[ap + -2] = [[ap + -49] + 40];
[ap + -1] = [[ap + -49] + 41];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 74171727245165, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -57] + 42];
[ap + -6] = [[ap + -57] + 43];
[ap + -5] = [[ap + -57] + 44];
[ap + -4] = [[ap + -57] + 45];
[ap + -3] = [[ap + -57] + 46];
[ap + -2] = [[ap + -57] + 47];
[ap + -1] = [[ap + -57] + 48];
[ap + 0] = 7797918962887871369869233580404, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 20557100634497705292079393140, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -65] + 49, ap++;
[ap + -9] = [[ap + -69] + 0];
[ap + -8] = [[ap + -69] + 1];
[ap + -7] = [[ap + -69] + 2];
[ap + -6] = [[ap + -69] + 3];
[ap + -5] = [[ap + -69] + 4];
[ap + -4] = [[ap + -69] + 5];
[ap + -3] = [[ap + -69] + 6];
[ap + -2] = [[ap + -69] + 7];
[ap + -1] = [[ap + -69] + 8];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 452823639416, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -79] + 9];
[ap + -8] = [[ap + -79] + 10];
[ap + -7] = [[ap + -79] + 11];
[ap + -6] = [[ap + -79] + 12];
[ap + -5] = [[ap + -79] + 13];
[ap + -4] = [[ap + -79] + 14];
[ap + -3] = [[ap + -79] + 15];
[ap + -2] = [[ap + -79] + 16];
[ap + -1] = [[ap + -79] + 17];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1851878757, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -9] = [[ap + -89] + 18];
[ap + -8] = [[ap + -89] + 19];
[ap + -7] = [[ap + -89] + 20];
[ap + -6] = [[ap + -89] + 21];
[ap + -5] = [[ap + -89] + 22];
[ap + -4] = [[ap + -89] + 23];
[ap + -3] = [[ap + -89] + 24];
[ap + -2] = [[ap + -89] + 25];
[ap + -1] = [[ap + -89] + 26];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8319400191629685864, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26936, ap++;
[ap + -9] = [[ap + -99] + 27];
[ap + -8] = [[ap + -99] + 28];
[ap + -7] = [[ap + -99] + 29];
[ap + -6] = [[ap + -99] + 30];
[ap + -5] = [[ap + -99] + 31];
[ap + -4] = [[ap + -99] + 32];
[ap + -3] = [[ap + -99] + 33];
[ap + -2] = [[ap + -99] + 34];
[ap + -1] = [[ap + -99] + 35];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8532478930809615481, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26936, ap++;
[ap + -9] = [[ap + -109] + 36];
[ap + -8] = [[ap + -109] + 37];
[ap + -7] = [[ap + -109] + 38];
[ap + -6] = [[ap + -109] + 39];
[ap + -5] = [[ap + -109] + 40];
[ap + -4] = [[ap + -109] + 41];
[ap + -3] = [[ap + -109] + 42];
[ap + -2] = [[ap + -109] + 43];
[ap + -1] = [[ap + -109] + 44];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1851986129345051194489, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26936, ap++;
[ap + -9] = [[ap + -119] + 45];
[ap + -8] = [[ap + -119] + 46];
[ap + -7] = [[ap + -119] + 47];
[ap + -6] = [[ap + -119] + 48];
[ap + -5] = [[ap + -119] + 49];
[ap + -4] = [[ap + -119] + 50];
[ap + -3] = [[ap + -119] + 51];
[ap + -2] = [[ap + -119] + 52];
[ap + -1] = [[ap + -119] + 53];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1819632491, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26936, ap++;
[ap + -9] = [[ap + -129] + 54];
[ap + -8] = [[ap + -129] + 55];
[ap + -7] = [[ap + -129] + 56];
[ap + -6] = [[ap + -129] + 57];
[ap + -5] = [[ap + -129] + 58];
[ap + -4] = [[ap + -129] + 59];
[ap + -3] = [[ap + -129] + 60];
[ap + -2] = [[ap + -129] + 61];
[ap + -1] = [[ap + -129] + 62];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2194921102833224431083982679296372223826092901, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 30008, ap++;
[ap + -9] = [[ap + -139] + 63];
[ap + -8] = [[ap + -139] + 64];
[ap + -7] = [[ap + -139] + 65];
[ap + -6] = [[ap + -139] + 66];
[ap + -5] = [[ap + -139] + 67];
[ap + -4] = [[ap + -139] + 68];
[ap + -3] = [[ap + -139] + 69];
[ap + -2] = [[ap + -139] + 70];
[ap + -1] = [[ap + -139] + 71];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 145391601773734352692684596893662995301, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 30008, ap++;
[ap + -9] = [[ap + -149] + 72];
[ap + -8] = [[ap + -149] + 73];
[ap + -7] = [[ap + -149] + 74];
[ap + -6] = [[ap + -149] + 75];
[ap + -5] = [[ap + -149] + 76];
[ap + -4] = [[ap + -149] + 77];
[ap + -3] = [[ap + -149] + 78];
[ap + -2] = [[ap + -149] + 79];
[ap + -1] = [[ap + -149] + 80];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 38251720776754892371511970850991848186725, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 30008, ap++;
[ap + -9] = [[ap + -159] + 81];
[ap + -8] = [[ap + -159] + 82];
[ap + -7] = [[ap + -159] + 83];
[ap + -6] = [[ap + -159] + 84];
[ap + -5] = [[ap + -159] + 85];
[ap + -4] = [[ap + -159] + 86];
[ap + -3] = [[ap + -159] + 87];
[ap + -2] = [[ap + -159] + 88];
[ap + -1] = [[ap + -159] + 89];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 36824665445191218256773413406785051710968736556610681, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 6893878, ap++;
[ap + -9] = [[ap + -169] + 90];
[ap + -8] = [[ap + -169] + 91];
[ap + -7] = [[ap + -169] + 92];
[ap + -6] = [[ap + -169] + 93];
[ap + -5] = [[ap + -169] + 94];
[ap + -4] = [[ap + -169] + 95];
[ap + -3] = [[ap + -169] + 96];
[ap + -2] = [[ap + -169] + 97];
[ap + -1] = [[ap + -169] + 98];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2439266307543924683601322188853351132892329081, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 6893878, ap++;
[ap + -9] = [[ap + -179] + 99];
[ap + -8] = [[ap + -179] + 100];
[ap + -7] = [[ap + -179] + 101];
[ap + -6] = [[ap + -179] + 102];
[ap + -5] = [[ap + -179] + 103];
[ap + -4] = [[ap + -179] + 104];
[ap + -3] = [[ap + -179] + 105];
[ap + -2] = [[ap + -179] + 106];
[ap + -1] = [[ap + -179] + 107];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 641757381843304608695464552639689489297414124665, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 6893878, ap++;
[ap + -9] = [[ap + -189] + 108];
[ap + -8] = [[ap + -189] + 109];
[ap + -7] = [[ap + -189] + 110];
[ap + -6] = [[ap + -189] + 111];
[ap + -5] = [[ap + -189] + 112];
[ap + -4] = [[ap + -189] + 113];
[ap + -3] = [[ap + -189] + 114];
[ap + -2] = [[ap + -189] + 115];
[ap + -1] = [[ap + -189] + 116];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 88292074925748493264888317519795414387, ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -204] + 117, ap++;
call rel 4246;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1315925605, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -9] + 0];
[ap + -6] = [[ap + -9] + 1];
[ap + -5] = [[ap + -9] + 2];
[ap + -4] = [[ap + -9] + 3];
[ap + -3] = [[ap + -9] + 4];
[ap + -2] = [[ap + -9] + 5];
[ap + -1] = [[ap + -9] + 6];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 313472685977919867416164, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -17] + 7];
[ap + -6] = [[ap + -17] + 8];
[ap + -5] = [[ap + -17] + 9];
[ap + -4] = [[ap + -17] + 10];
[ap + -3] = [[ap + -17] + 11];
[ap + -2] = [[ap + -17] + 12];
[ap + -1] = [[ap + -17] + 13];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 71959718098290, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -25] + 14];
[ap + -6] = [[ap + -25] + 15];
[ap + -5] = [[ap + -25] + 16];
[ap + -4] = [[ap + -25] + 17];
[ap + -3] = [[ap + -25] + 18];
[ap + -2] = [[ap + -25] + 19];
[ap + -1] = [[ap + -25] + 20];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 20940711753708153, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -33] + 21];
[ap + -6] = [[ap + -33] + 22];
[ap + -5] = [[ap + -33] + 23];
[ap + -4] = [[ap + -33] + 24];
[ap + -3] = [[ap + -33] + 25];
[ap + -2] = [[ap + -33] + 26];
[ap + -1] = [[ap + -33] + 27];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1298232171, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -41] + 28];
[ap + -6] = [[ap + -41] + 29];
[ap + -5] = [[ap + -41] + 30];
[ap + -4] = [[ap + -41] + 31];
[ap + -3] = [[ap + -41] + 32];
[ap + -2] = [[ap + -41] + 33];
[ap + -1] = [[ap + -41] + 34];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 96092938071918, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -49] + 35];
[ap + -6] = [[ap + -49] + 36];
[ap + -5] = [[ap + -49] + 37];
[ap + -4] = [[ap + -49] + 38];
[ap + -3] = [[ap + -49] + 39];
[ap + -2] = [[ap + -49] + 40];
[ap + -1] = [[ap + -49] + 41];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 74171727245165, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [[ap + -57] + 42];
[ap + -6] = [[ap + -57] + 43];
[ap + -5] = [[ap + -57] + 44];
[ap + -4] = [[ap + -57] + 45];
[ap + -3] = [[ap + -57] + 46];
[ap + -2] = [[ap + -57] + 47];
[ap + -1] = [[ap + -57] + 48];
[ap + 0] = 7797918962887871369869233580404, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 20557100634497705292079393140, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -65] + 49, ap++;
[ap + -9] = [[ap + -69] + 0];
[ap + -8] = [[ap + -69] + 1];
[ap + -7] = [[ap + -69] + 2];
[ap + -6] = [[ap + -69] + 3];
[ap + -5] = [[ap + -69] + 4];
[ap + -4] = [[ap + -69] + 5];
[ap + -3] = [[ap + -69] + 6];
[ap + -2] = [[ap + -69] + 7];
[ap + -1] = [[ap + -69] + 8];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 452823639416, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -79] + 9];
[ap + -8] = [[ap + -79] + 10];
[ap + -7] = [[ap + -79] + 11];
[ap + -6] = [[ap + -79] + 12];
[ap + -5] = [[ap + -79] + 13];
[ap + -4] = [[ap + -79] + 14];
[ap + -3] = [[ap + -79] + 15];
[ap + -2] = [[ap + -79] + 16];
[ap + -1] = [[ap + -79] + 17];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1936486260, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7680818, ap++;
[ap + -9] = [[ap + -89] + 18];
[ap + -8] = [[ap + -89] + 19];
[ap + -7] = [[ap + -89] + 20];
[ap + -6] = [[ap + -89] + 21];
[ap + -5] = [[ap + -89] + 22];
[ap + -4] = [[ap + -89] + 23];
[ap + -3] = [[ap + -89] + 24];
[ap + -2] = [[ap + -89] + 25];
[ap + -1] = [[ap + -89] + 26];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107152796640107, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 28821964104807730, ap++;
[ap + -9] = [[ap + -99] + 27];
[ap + -8] = [[ap + -99] + 28];
[ap + -7] = [[ap + -99] + 29];
[ap + -6] = [[ap + -99] + 30];
[ap + -5] = [[ap + -99] + 31];
[ap + -4] = [[ap + -99] + 32];
[ap + -3] = [[ap + -99] + 33];
[ap + -2] = [[ap + -99] + 34];
[ap + -1] = [[ap + -99] + 35];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 309102029792370999717748, ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -114] + 36, ap++;
call rel 3965;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 239;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 213 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 191;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 165 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 143;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 117 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 4];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 95;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 69 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 6];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 47;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 9], ap++;
[ap + -5] = [[fp + -5] + 10];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 8];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 9];
ap += 5;
[ap + 0] = [fp + -5] + 10, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 11, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 75;
ap += 8;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 67;
ap += 6;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 58;
ap += 14;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 50;
ap += 12;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 41;
ap += 20;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
jmp rel 33;
ap += 18;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 24;
ap += 26;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 16;
ap += 24;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 32;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 12707;
[ap + 0] = [ap + -1] + 12706, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 76480, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 69;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 3801;
jmp rel 41 if [ap + -15] != 0;
jmp rel 26 if [ap + -12] != 0;
[ap + -11] = [[fp + -3] + 0];
[ap + -10] = [[fp + -3] + 1];
[ap + -9] = [[fp + -3] + 2];
[ap + -8] = [[fp + -3] + 3];
[ap + -7] = [[fp + -3] + 4];
[ap + -6] = [[fp + -3] + 5];
[ap + -5] = [[fp + -3] + 6];
[ap + -4] = [[fp + -3] + 7];
[ap + -3] = [[fp + -3] + 8];
[ap + -2] = [[fp + -3] + 9];
[ap + -1] = [[fp + -3] + 10];
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 11, ap++;
call rel -57;
ret;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20] + 4570, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
call rel -9890;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 30 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 3861;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -155], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 141;
call rel 4325;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 156;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
%{ memory[ap + 0] = 25440 <= memory[fp + -16] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -16] + 340282366920938463463374607431768186016, ap++;
[ap + -1] = [[fp + -17] + 0];
jmp rel 106;
[fp + -16] = [ap + 0] + 25440, ap++;
[ap + -1] = [[fp + -17] + 0];
[fp + -14] = [ap + 0] + [fp + -15], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 78;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -15] + 0], ap++;
[ap + 0] = [[fp + -15] + 1], ap++;
[ap + 0] = [[fp + -15] + 2], ap++;
[ap + 0] = [[fp + -15] + 3], ap++;
[ap + 0] = [[fp + -15] + 4], ap++;
[ap + 0] = [[fp + -15] + 5], ap++;
[ap + 0] = [[fp + -15] + 6], ap++;
[ap + 0] = [[fp + -15] + 7], ap++;
[ap + 0] = [[fp + -15] + 8], ap++;
[ap + 0] = [[fp + -15] + 9], ap++;
[ap + 0] = [[fp + -15] + 10], ap++;
call rel 4230;
jmp rel 21 if [ap + -12] != 0;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [fp + -15] + 11, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -59;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = [ap + -3] + 26140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -10141;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = 0, ap++;
[fp + -13] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 0];
jmp rel 51;
[ap + -1] = [[fp + -14] + 0];
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -13], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 1];
jmp rel 32;
[ap + -1] = [[fp + -14] + 1];
%{ memory[ap + 0] = (memory[fp + -13] + 0) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -13] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -13] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -14] + 2];
jmp rel 16;
[fp + -13] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -14] + 2];
jmp rel 11;
[fp + -13] = [[fp + -14] + 2];
[ap + 0] = [fp + -13] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -14] + 3];
[ap + 0] = [fp + -14] + 4, ap++;
[ap + 0] = [fp + -13], ap++;
jmp rel 22;
ap += 75;
[ap + 0] = [fp + -14] + 3, ap++;
jmp rel 355;
ap += 1;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = 100, ap++;
jmp rel 8;
ap += 4;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[fp + -12] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 51;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -12], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 32;
[ap + -1] = [[ap + -8] + 1];
%{ memory[ap + 0] = (memory[fp + -12] + 0) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -12] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -12] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 16;
[fp + -12] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 11;
[fp + -12] = [[ap + -9] + 2];
[ap + 0] = [fp + -12] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -10] + 3];
[ap + 0] = [ap + -10] + 4, ap++;
[ap + 0] = [fp + -12], ap++;
jmp rel 22;
ap += 65;
[ap + 0] = [ap + -76] + 3, ap++;
jmp rel 290;
ap += 1;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 100, ap++;
jmp rel 8;
ap += 4;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[fp + -11] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 51;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -11], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 32;
[ap + -1] = [[ap + -8] + 1];
%{ memory[ap + 0] = (memory[fp + -11] + 0) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -11] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -11] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 16;
[fp + -11] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 11;
[fp + -11] = [[ap + -9] + 2];
[ap + 0] = [fp + -11] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -10] + 3];
[ap + 0] = [ap + -10] + 4, ap++;
[ap + 0] = [fp + -11], ap++;
jmp rel 22;
ap += 55;
[ap + 0] = [ap + -66] + 3, ap++;
jmp rel 225;
ap += 1;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 100, ap++;
jmp rel 8;
ap += 4;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[fp + -10] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 51;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -10], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 32;
[ap + -1] = [[ap + -8] + 1];
%{ memory[ap + 0] = (memory[fp + -10] + 0) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -10] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -10] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 16;
[fp + -10] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 11;
[fp + -10] = [[ap + -9] + 2];
[ap + 0] = [fp + -10] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -10] + 3];
[ap + 0] = [ap + -10] + 4, ap++;
[ap + 0] = [fp + -10], ap++;
jmp rel 22;
ap += 45;
[ap + 0] = [ap + -56] + 3, ap++;
jmp rel 160;
ap += 1;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = 100, ap++;
jmp rel 8;
ap += 4;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 24;
[ap + -1] = [[ap + -5] + 0];
%{ memory[ap + 0] = memory[fp + -9] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -9] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 1];
jmp rel 10;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [ap + -7] + 2, ap++;
[ap + 0] = [fp + -9], ap++;
jmp rel 14;
ap += 39;
[ap + 0] = [ap + -46] + 2, ap++;
jmp rel 114;
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 100, ap++;
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 24;
[ap + -1] = [[ap + -5] + 0];
%{ memory[ap + 0] = memory[fp + -8] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -8] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 1];
jmp rel 10;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [ap + -7] + 2, ap++;
[ap + 0] = [fp + -8], ap++;
jmp rel 14;
ap += 32;
[ap + 0] = [ap + -39] + 2, ap++;
jmp rel 76;
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 100, ap++;
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 24;
[ap + -1] = [[ap + -5] + 0];
%{ memory[ap + 0] = memory[fp + -7] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 1];
jmp rel 10;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [ap + -7] + 2, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 14;
ap += 25;
[ap + 0] = [ap + -32] + 2, ap++;
jmp rel 38;
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 100, ap++;
[ap + 0] = 100, ap++;
[ap + -1] = [ap + 1] + [fp + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 48;
[ap + -1] = [[ap + -5] + 0];
%{ memory[ap + 0] = memory[fp + -6] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -6] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 1];
jmp rel 10;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [ap + -7] + 2, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 38;
ap += 18;
[ap + 0] = [ap + -25] + 2, ap++;
call rel 507;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 100, ap++;
%{ memory[ap + 0] = (memory[fp + -5] + 0) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -5] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 18;
[fp + -5] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[fp + -5] = [[ap + -3] + 0];
[ap + 0] = [fp + -5] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -4] + 1];
ap += 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 25;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 11;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 65535, ap++;
%{ memory[ap + 0] = (memory[fp + -4] + 0) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -4] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 18;
[fp + -4] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[fp + -4] = [[ap + -3] + 0];
[ap + 0] = [fp + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -4] + 1];
ap += 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 25;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 11;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 65535, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 29;
[fp + -3] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 24;
[fp + -3] = [[ap + -3] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -4] + 1];
ap += 5;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 22;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 65535, ap++;
ret;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 4175;
jmp rel 121 if [ap + -4] != 0;
jmp rel 106 if [ap + -3] != 0;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 85;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + 0] = [fp + -6] + [ap + -6], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4294967296, ap++;
[ap + 0] = 1436209994116032968217460821259974301319484759399248048177294919499399378304, ap++;
[ap + 0] = [ap + -2] + [ap + -9], ap++;
[ap + -2] = [[fp + -8] + 0];
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -19] + 1], ap++;
[ap + -4] = [[ap + -20] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -22] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -21] + 2], ap++;
[ap + -7] = [[ap + -22] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
[ap + -2] = [[fp + -7] + 2];
[ap + -3] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
ret;
ap += 10;
call rel 4201;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
call rel 4192;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 12;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 0], ap++;
[ap + 0] = [[fp + -5] + 1], ap++;
jmp rel 11;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 111 if [ap + -3] != 0;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 87;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + 0] = 1436209994116032968217460821259974301319484759399248048177294919499399378304, ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -20] = [[fp + -6] + 1];
[ap + -2] = [[fp + -6] + 2];
[ap + -3] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 20 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -2] + 10, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
ret;
ap += 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 7;
call rel 4047;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 10;
call rel 11448;
[ap + 0] = [ap + -1] + 11447, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12120, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -23] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
call rel -6192;
ret;
jmp rel 168 if [fp + -3] != 0;
%{ memory[ap + 0] = memory[fp + -4] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 155;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -12] + 0];
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 1];
jmp rel 17;
[ap + -1] = [[fp + -12] + 1];
call rel 3988;
[ap + 0] = [fp + -12] + 2, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 36, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 2];
jmp rel 103;
[ap + -1] = [[fp + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 10, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 3];
jmp rel 34;
[ap + -1] = [[fp + -12] + 3];
[ap + 0] = [fp + -12] + 4, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 3946;
jmp rel 9 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 30;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -12] + 4, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 4117;
jmp rel 34 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 4377;
jmp rel 11 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4508;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [fp + -11] + 7150, ap++;
jmp rel 5;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 7720, ap++;
call rel -176;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 186;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 6;
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 165;
jmp rel 154;
jmp rel 143;
jmp rel 132;
jmp rel 121;
jmp rel 110;
jmp rel 99;
jmp rel 88;
jmp rel 77;
jmp rel 66;
jmp rel 55;
jmp rel 44;
jmp rel 33;
jmp rel 22;
jmp rel 11;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 256, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 65536, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 16777216, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4294967296, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1099511627776, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 281474976710656, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 72057594037927936, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 18446744073709551616, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4722366482869645213696, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
ret;
call rel 4286;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 31 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 31, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 344;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211425, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010271, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 325;
jmp rel 314;
jmp rel 303;
jmp rel 292;
jmp rel 281;
jmp rel 270;
jmp rel 259;
jmp rel 248;
jmp rel 237;
jmp rel 226;
jmp rel 215;
jmp rel 204;
jmp rel 193;
jmp rel 182;
jmp rel 171;
jmp rel 160;
jmp rel 149;
jmp rel 138;
jmp rel 127;
jmp rel 116;
jmp rel 105;
jmp rel 94;
jmp rel 83;
jmp rel 72;
jmp rel 61;
jmp rel 50;
jmp rel 39;
jmp rel 28;
jmp rel 17;
jmp rel 6;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel 276;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 256, ap++;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 65536, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 16777216, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 4294967296, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1099511627776, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 281474976710656, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 72057594037927936, ap++;
[ap + 0] = 4722366482869645213696, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 18446744073709551616, ap++;
[ap + 0] = 18446744073709551616, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 4722366482869645213696, ap++;
[ap + 0] = 72057594037927936, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
[ap + 0] = 281474976710656, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
[ap + 0] = 1099511627776, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
[ap + 0] = 4294967296, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
[ap + 0] = 16777216, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
[ap + 0] = 65536, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = 256, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 256, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 65536, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 16777216, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4294967296, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1099511627776, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 281474976710656, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 72057594037927936, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 18446744073709551616, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 4722366482869645213696, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1208925819614629174706176, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 309485009821345068724781056, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 79228162514264337593543950336, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 20282409603651670423947251286016, ap++;
ret;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5192296858534827628530496329220096, ap++;
ret;
ap += 2;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1995392260568499387643902728889710, ap++;
call rel -6941;
ret;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
call rel -6946;
ret;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
call rel -6951;
ret;
%{ memory[ap + 0] = 1570 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209886, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 33;
[fp + -7] = [ap + 0] + 1570, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -26;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2270, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -11886;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 9;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -9668;
jmp rel 401 if [ap + -8] != 0;
jmp rel 363 if [ap + -5] != 0;
[fp + 1] = [ap + -4];
[fp + 2] = [ap + -3];
[fp + 3] = [ap + -2];
[fp + 4] = [ap + -1];
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 318;
[fp + 5] = [[ap + -8] + 0];
%{ memory[ap + 0] = (memory[fp + 5] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 5] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 292 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 5] = [[ap + -12] + 0];
[ap + 0] = [fp + 5] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 270;
[fp + 6] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 6] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 6] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -22] + 3], ap++;
[ap + -5] = [[ap + -23] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 6] = [[ap + -17] + 2];
[ap + 0] = [fp + 6] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -18] + 3];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 222;
[fp + 0] = [[ap + -3] + 0];
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 5], ap++;
[ap + -5] = [[ap + -28] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 196 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -22] + 4];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 145;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
call rel 3734;
jmp rel 99 if [ap + -6] != 0;
jmp rel 90 if [ap + -3] != 0;
[fp + 7] = [ap + -2];
[fp + 8] = [ap + -1];
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 76;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
call rel 3711;
jmp rel 31 if [ap + -6] != 0;
jmp rel 23 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 500, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 199;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3270, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 161;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 3750, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 39;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -26] + 6, ap++;
[ap + 0] = [ap + -26] + 7120, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -28] + 6850, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 41;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -21] + 8050, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -23] + 7880, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 24;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -16] + 9080, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 16;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 8910, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 7;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 10210, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 10870, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[fp + -3] = [ap + 0] + -128, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 27;
[ap + -1] = [[fp + -4] + 0];
ap += 8;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 13;
[fp + -3] = [[fp + -4] + 1];
ap += 10;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
jmp rel 70;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211584, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 66;
[ap + -3] = [ap + 0] + 128, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 72;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -4] + 2];
%{ memory[ap + 0] = (memory[ap + -4] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 36;
[ap + -5] = [[fp + -4] + 3];
[ap + 0] = 128, ap++;
%{ memory[ap + 0] = (memory[ap + -1] + memory[ap + -6]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -4] + 4];
jmp rel 16;
[ap + 1] = [ap + -2] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -4] + 4];
ap += 8;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel 3480;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
[ap + 0] = [fp + -4] + 4, ap++;
call rel -1361;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 5;
call rel 3462;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 5;
call rel 3456;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 22;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 255, ap++;
ret;
[fp + -3] = [ap + 0] + -32768, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 27;
[ap + -1] = [[fp + -4] + 0];
ap += 8;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 13;
[fp + -3] = [[fp + -4] + 1];
ap += 10;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
jmp rel 70;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 0] + [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768244224, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 66;
[ap + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 72;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 2];
%{ memory[ap + 0] = (memory[ap + -4] + 0) % PRIME < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 36;
[ap + -5] = [[fp + -4] + 3];
[ap + 0] = 32768, ap++;
%{ memory[ap + 0] = (memory[ap + -1] + memory[ap + -6]) % PRIME < 65536 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -2] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -4] + 4];
jmp rel 16;
[ap + 1] = [ap + -2] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768145920, ap++;
[ap + -2] = [[fp + -4] + 4];
ap += 8;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
ret;
call rel 3346;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
[ap + 0] = [fp + -4] + 4, ap++;
call rel -1510;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 5;
call rel 3328;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 5;
call rel 3322;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 22;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 65535, ap++;
ret;
%{ memory[ap + 0] = 5990 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768205466, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 111;
[fp + -7] = [ap + 0] + 5990, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 94;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 11 if [ap + -8] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 10;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -11] + 100, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel [ap + -11];
jmp rel 36;
jmp rel 24;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 30;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -11] = [[ap + -2] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
jmp rel 20;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -11] = [[ap + -2] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
jmp rel 10;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 3214;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -104;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 6690, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -12750;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel [fp + -19];
jmp rel 67;
jmp rel 56;
jmp rel 45;
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 55;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 46;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 37;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 19;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 10;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -23] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[fp + -18] = [[ap + -1] + 0];
[fp + -16] = [ap + 0] + [fp + -17], ap++;
[ap + -1] = [[ap + -2] + 1];
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
call rel -1002;
jmp rel 83 if [ap + -3] != 0;
[ap + 0] = 1062799989286861497646673457769309433976004466846907043354399004328696077865, ap++;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -20], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[fp + -15] = [[ap + -5] + 0];
[fp + -14] = [[ap + -5] + 1];
[fp + -13] = [[ap + -5] + 2];
[fp + -12] = [[ap + -5] + 3];
[fp + -11] = [[ap + -5] + 4];
[fp + -10] = [[ap + -5] + 5];
[fp + -9] = [[ap + -5] + 6];
[fp + -8] = [[ap + -5] + 7];
[fp + -7] = [[ap + -5] + 8];
[fp + -6] = [[ap + -5] + 9];
[fp + -5] = [[ap + -5] + 10];
[fp + -4] = [[ap + -5] + 11];
[fp + -3] = [[ap + -5] + 12];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 13, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -11] + 3;
call rel -12520;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -22] + 0];
[ap + -5] = [[fp + -22] + 1];
[fp + 0] = [[fp + -22] + 2];
[fp + 1] = [[fp + -22] + 3];
[ap + -3] = [[fp + -22] + 4];
[ap + -2] = [[fp + -22] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -22]) %}
[ap + 0] = [[fp + -22] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -22] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -22] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -22] + 6], ap++;
[ap + 0] = [fp + -22] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -22] + 8], ap++;
[ap + 0] = [[fp + -22] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 9567;
[ap + 0] = [ap + -1] + 9566, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 27590, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 167;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -7] + [fp + -6], ap++;
[fp + -5] = [[fp + -9] + 0];
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -4] = [[fp + -11] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 2], ap++;
[ap + -7] = [[fp + -11] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -12] = [[fp + -8] + 1];
[ap + -2] = [[fp + -8] + 2];
[ap + -3] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 107 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 6], ap++;
jmp rel 24 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 9499;
[ap + 0] = [ap + -1] + 9498, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 15380, ap++;
[ap + 0] = [fp + -11] + 4, ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -6], ap++;
ret;
[fp + -5] = [[fp + -9] + 3];
[ap + -13] = [[fp + -9] + 4];
[ap + 0] = [[fp + -9] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 4], ap++;
[ap + -4] = [[fp + -11] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 5], ap++;
[ap + -7] = [[fp + -11] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -4] = [[fp + -8] + 8];
[ap + -3] = [[fp + -8] + 9];
[ap + -5] = [[fp + -8] + 10];
[ap + -2] = [[fp + -8] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 13], ap++;
jmp rel 21 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 12], ap++;
[ap + -27] = [[fp + -3] + 0];
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [fp + -8] + 14, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -152;
ret;
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = [[fp + -8] + 12], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [fp + -8] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 14], ap++;
[ap + 0] = [[fp + -8] + 15], ap++;
ret;
[ap + 0] = [fp + -11] + 4, ap++;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
call rel -13126;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 13270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768198186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 66;
[fp + -7] = [ap + 0] + 13270, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -4] = [ap + 0] + [fp + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 48;
[ap + 0] = 181315633587806608749396046320465637423067733253841877734401949135886786816, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -5] + 0], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -10] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[ap + -4] = [[fp + -6] + 4];
[ap + -4] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -48;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 13970, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
call rel -13211;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 5;
call rel 9286;
[ap + 0] = [ap + -1] + 9285, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 33950, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -11] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 156;
[fp + -11] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 130;
[fp + 2] = [fp + -8] + 1;
[fp + 3] = [fp + -7];
[fp + -6] = [ap + 0] + 4294967295, ap++;
jmp rel 16 if [ap + -1] != 0;
call rel -1411;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[fp + 0] = [fp + -6] + 1;
[fp + 4] = [[fp + -8] + 0];
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 3055551908028526501914924269284987698957048785899022598052704863388955138917, ap++;
[fp + 1] = [fp + -5] + [fp + -6];
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + 4], ap++;
call rel 3189;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = 1436209994116032968217460821259974301319484759399248048177294919499399378304, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + 1] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -16] = [[ap + -15] + 1];
[ap + -2] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[fp + 4] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -125;
ret;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [[ap + -17] + 5], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -19] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -22] + 7], ap++;
[ap + 0] = [[ap + -23] + 8], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 9135;
[ap + 0] = [ap + -1] + 9134, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 34150, ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
ret;
call rel -13394;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 19380 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768192076, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 76;
[fp + -7] = [ap + 0] + 19380, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 57;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 10], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[fp + 0] = [fp + -6] + 12;
[fp + 1] = [fp + -5];
call rel 3180;
jmp rel 24 if [ap + -13] != 0;
[ap + -12] = [[fp + -3] + 0];
[ap + -11] = [[fp + -3] + 1];
[ap + -10] = [[fp + -3] + 2];
[ap + -9] = [[fp + -3] + 3];
[ap + -8] = [[fp + -3] + 4];
[ap + -7] = [[fp + -3] + 5];
[ap + -6] = [[fp + -3] + 6];
[ap + -5] = [[fp + -3] + 7];
[ap + -4] = [[fp + -3] + 8];
[ap + -3] = [[fp + -3] + 9];
[ap + -2] = [[fp + -3] + 10];
[ap + -1] = [[fp + -3] + 11];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
call rel -58;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 20080, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -13491;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 10;
[ap + 0] = 313215164569295318208292514394769381779806795543033682241894454505053143643, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[fp + 6] = [ap + -8];
[fp + 7] = [ap + -7];
[fp + 8] = [ap + -6];
[fp + 9] = [ap + -5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -10] = [[ap + -1] + 0];
[fp + 7] = [ap + 0] + [fp + 6], ap++;
[ap + -1] = [[ap + -2] + 1];
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
[fp + 0] = [ap + -12];
[fp + 1] = [ap + -11];
[fp + 2] = [ap + -10];
[fp + 3] = [ap + -9];
call rel -1689;
jmp rel 87 if [ap + -3] != 0;
[fp + 8] = [[ap + -1] + 0];
[fp + 9] = [[ap + -1] + 1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -2] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
call rel -1704;
jmp rel 64 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[fp + 4] = [ap + -12];
[fp + 5] = [ap + -11];
call rel 3215;
jmp rel 39 if [ap + -3] != 0;
[fp + 2] = [[fp + 5] + 0];
[fp + 3] = [[fp + 5] + 1];
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -16] + 0];
[ap + -7] = [[fp + -16] + 1];
[ap + -3] = [[fp + -16] + 2];
[ap + -2] = [[fp + -16] + 3];
[ap + -5] = [[fp + -16] + 4];
[ap + -4] = [[fp + -16] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16]) %}
[ap + 0] = [[fp + -16] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -16] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[fp + -16] + 6], ap++;
[ap + 0] = [fp + -16] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 8], ap++;
[ap + 0] = [[fp + -16] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 105 if [ap + -2] != 0;
[ap + 0] = 1555170125836447351353653902862745931305207776976209346350698701924491819, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + -2] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 3117;
jmp rel 26 if [ap + -12] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
ret;
ap += 382;
call rel 8748;
[ap + 0] = [ap + -1] + 8747, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 64190, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -397] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 255, ap++;
[fp + -3] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 443;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = 256, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 1], ap++;
[ap + 5] = [[fp + -5] + 2], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 3], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 4];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 5];
[ap + -1] = [[fp + -4] + 6];
[ap + 0] = [[fp + -4] + 7], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 5];
jmp rel 401;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = 65536, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 6], ap++;
[ap + 5] = [[fp + -5] + 7], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 8], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 9];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 10];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [[fp + -4] + 12], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 10];
jmp rel 359;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 10];
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 11], ap++;
[ap + 5] = [[fp + -5] + 12], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 13], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 14];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 15];
[ap + -1] = [[fp + -4] + 16];
[ap + 0] = [[fp + -4] + 17], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 15];
jmp rel 317;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 15];
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 16], ap++;
[ap + 5] = [[fp + -5] + 17], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 18], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 19];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 20];
[ap + -1] = [[fp + -4] + 21];
[ap + 0] = [[fp + -4] + 22], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 20];
jmp rel 275;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 20];
[ap + 0] = 1099511627776, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 21], ap++;
[ap + 5] = [[fp + -5] + 22], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 23], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 24];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 25];
[ap + -1] = [[fp + -4] + 26];
[ap + 0] = [[fp + -4] + 27], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 25];
jmp rel 233;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 25];
[ap + 0] = 281474976710656, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 26], ap++;
[ap + 5] = [[fp + -5] + 27], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 28], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 29];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 30];
[ap + -1] = [[fp + -4] + 31];
[ap + 0] = [[fp + -4] + 32], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 30];
jmp rel 191;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 30];
[ap + 0] = 72057594037927936, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 31], ap++;
[ap + 5] = [[fp + -5] + 32], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 33], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 34];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 35];
[ap + -1] = [[fp + -4] + 36];
[ap + 0] = [[fp + -4] + 37], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 35];
jmp rel 149;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 35];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 36], ap++;
[ap + 5] = [[fp + -5] + 37], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 38], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 39];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 40];
[ap + -1] = [[fp + -4] + 41];
[ap + 0] = [[fp + -4] + 42], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 40];
jmp rel 107;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 40];
[ap + 0] = 1208925819614629174706176, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 41], ap++;
[ap + 5] = [[fp + -5] + 42], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 43], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 44];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 45];
[ap + -1] = [[fp + -4] + 46];
[ap + 0] = [[fp + -4] + 47], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 45];
jmp rel 65;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 45];
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 46], ap++;
[ap + 5] = [[fp + -5] + 47], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 48], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 49];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 50];
[ap + -1] = [[fp + -4] + 51];
[ap + 0] = [[fp + -4] + 52], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 50];
jmp rel 25;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 50];
ap += 10;
[ap + 0] = [fp + -5] + 51, ap++;
[ap + 0] = [fp + -4] + 55, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
[ap + 0] = [fp + -5] + 51, ap++;
[ap + 0] = [fp + -4] + 55, ap++;
jmp rel 80;
ap += 12;
[ap + 0] = [fp + -5] + 46, ap++;
[ap + 0] = [fp + -4] + 50, ap++;
jmp rel 72;
ap += 24;
[ap + 0] = [fp + -5] + 41, ap++;
[ap + 0] = [fp + -4] + 45, ap++;
jmp rel 64;
ap += 36;
[ap + 0] = [fp + -5] + 36, ap++;
[ap + 0] = [fp + -4] + 40, ap++;
jmp rel 56;
ap += 48;
[ap + 0] = [fp + -5] + 31, ap++;
[ap + 0] = [fp + -4] + 35, ap++;
jmp rel 48;
ap += 60;
[ap + 0] = [fp + -5] + 26, ap++;
[ap + 0] = [fp + -4] + 30, ap++;
jmp rel 40;
ap += 72;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [fp + -4] + 25, ap++;
jmp rel 32;
ap += 84;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [fp + -4] + 20, ap++;
jmp rel 24;
ap += 96;
[ap + 0] = [fp + -5] + 11, ap++;
[ap + 0] = [fp + -4] + 15, ap++;
jmp rel 16;
ap += 108;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [fp + -4] + 10, ap++;
jmp rel 8;
ap += 120;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4] + 5, ap++;
call rel -3183;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
call rel -9402;
ret;
[ap + 0] = [fp + -24] + [fp + -13], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[fp + -25] + 0];
jmp rel 601;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 0];
jmp rel 625;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -25] + 1];
[ap + 0] = [fp + -23] + [fp + -12], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[fp + -25] + 2];
jmp rel 522;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 2];
jmp rel 546;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -25] + 3];
[ap + 0] = [fp + -22] + [fp + -11], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[fp + -25] + 4];
jmp rel 443;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 4];
jmp rel 467;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -25] + 5];
[ap + 0] = [fp + -21] + [fp + -10], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[fp + -25] + 6];
jmp rel 364;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 6];
jmp rel 388;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[fp + -25] + 6];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[fp + -25] + 7];
[ap + 0] = [fp + -25] + 8, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -8], ap++;
call rel 2550;
jmp rel 319 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -7], ap++;
call rel 2543;
jmp rel 286 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 2536;
jmp rel 253 if [ap + -3] != 0;
[ap + 0] = [fp + -16] + [fp + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 185;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 209;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[ap + -8] + 1];
[ap + 0] = [fp + -15] + [fp + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[ap + -12] + 2];
jmp rel 106;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[ap + -12] + 2];
jmp rel 130;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[ap + -11] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[ap + -12] + 3];
[ap + 0] = [fp + -14] + [fp + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 2147483648) % PRIME < 4294967296 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607433915695104, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 31;
[ap + -3] = [ap + 0] + 2147483648, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 53;
[ap + 0] = [ap + -2] + 2147483648, ap++;
[ap + -1] = [[ap + -15] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607429620727808, ap++;
[ap + -1] = [[ap + -16] + 5];
ap += 8;
[ap + 0] = [ap + -24] + 6, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
call rel 2590;
[ap + 0] = [ap + -24] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
call rel 2568;
[ap + 0] = [ap + -24] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 4;
call rel 2534;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 4;
call rel 2510;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 8;
call rel 2476;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 8;
call rel 2452;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 20;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
ret;
ap += 51;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
ret;
ap += 82;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -95], ap++;
ret;
ap += 105;
call rel 2340;
[ap + 0] = [fp + -25] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 105;
call rel 2316;
[ap + 0] = [fp + -25] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 109;
call rel 2282;
[ap + 0] = [fp + -25] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 109;
call rel 2258;
[ap + 0] = [fp + -25] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 113;
call rel 2224;
[ap + 0] = [fp + -25] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 113;
call rel 2200;
[ap + 0] = [fp + -25] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 117;
call rel 2166;
[ap + 0] = [fp + -25] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 117;
call rel 2142;
[ap + 0] = [fp + -25] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 7;
ap += 18;
[ap + 0] = [fp + -5], ap++;
jmp rel 92;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 96;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 66 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -5] + 2];
jmp rel 45;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + -5] = [[fp + -5] + 5];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 19 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 3];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 4];
ap += 5;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [fp + -5] + 6, ap++;
jmp rel 12;
ap += 1;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 18;
ap += 9;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 8;
[ap + 0] = [fp + -5], ap++;
call rel 10;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
call rel -10198;
ret;
[ap + 0] = 1637577033762547024928219503506405592178450804, ap++;
call rel -10203;
ret;
[ap + 0] = 130770336871384315582580298231695941681, ap++;
call rel -10208;
ret;
%{ memory[ap + 0] = 8860 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768202596, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 183;
[fp + -9] = [ap + 0] + 8860, ap++;
[ap + -1] = [[fp + -10] + 0];
%{
dividend = memory[fp + -8] + memory[fp + -7] * 2**128
divisor = memory[fp + -6] + memory[fp + -5] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -10] + 1], ap++;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 3], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -6] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -10] + 5];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -10] + 5];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -6], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -8], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -5] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -5], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -5], ap++;
jmp rel 12;
[fp + -5] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -6] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -6], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -6];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -10] + 6];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -7] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 7], ap++;
[ap + -2] = [[fp + -10] + 8], ap++;
[ap + -2] = [[fp + -10] + 9];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -6], ap++;
[ap + 0] = [ap + -4] * [fp + -6], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 10], ap++;
[ap + -1] = [[fp + -10] + 11], ap++;
[ap + -3] = [[fp + -10] + 12];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 13], ap++;
[ap + -3] = [[fp + -10] + 14], ap++;
[ap + -27] = [[fp + -10] + 15];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
jmp rel 81 if [ap + -31] != 0;
%{ memory[ap + 0] = memory[ap + -32] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -33] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -10] + 16];
jmp rel 68;
[ap + 0] = [ap + -33] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -10] + 16];
[ap + 0] = 48, ap++;
%{ memory[ap + 0] = (memory[ap + -35] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -36] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -10] + 17];
jmp rel 41;
[ap + 1] = [ap + -36] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -10] + 17];
[ap + -1] = [[fp + -3] + 0];
jmp rel 19 if [ap + -40] != 0;
jmp rel 14 if [ap + -39] != 0;
[ap + 0] = [fp + -10] + 18, ap++;
[ap + 0] = [ap + -42] + 2570, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = [ap + -41], ap++;
jmp rel 4;
[ap + 0] = [ap + -41] + 200, ap++;
[ap + 0] = [fp + -10] + 18, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -148;
ret;
call rel 656;
[ap + 0] = [fp + -10] + 18, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -10] + 17, ap++;
[ap + 0] = [ap + -38] + 2140, ap++;
jmp rel 6;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = [ap + -36] + 2710, ap++;
call rel -4196;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -15293;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 10200 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768201256, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 253;
[fp + -9] = [ap + 0] + 10200, ap++;
[ap + -1] = [[fp + -10] + 0];
%{
dividend = memory[fp + -8] + memory[fp + -7] * 2**128
divisor = memory[fp + -6] + memory[fp + -5] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -10] + 1], ap++;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 3], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -6] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -10] + 5];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -10] + 5];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -6], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -8], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -5] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -5], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -5], ap++;
jmp rel 12;
[fp + -5] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -6] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -6], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -6];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -10] + 6];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -7] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 7], ap++;
[ap + -2] = [[fp + -10] + 8], ap++;
[ap + -2] = [[fp + -10] + 9];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -6], ap++;
[ap + 0] = [ap + -4] * [fp + -6], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 10], ap++;
[ap + -1] = [[fp + -10] + 11], ap++;
[ap + -3] = [[fp + -10] + 12];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 13], ap++;
[ap + -3] = [[fp + -10] + 14], ap++;
[ap + -27] = [[fp + -10] + 15];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
jmp rel 151 if [ap + -31] != 0;
%{ memory[ap + 0] = memory[ap + -32] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -33] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -10] + 16];
jmp rel 138;
[ap + 0] = [ap + -33] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -10] + 16];
[ap + 0] = 10, ap++;
[ap + -35] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 17];
jmp rel 54;
[ap + -1] = [[fp + -10] + 17];
[ap + 0] = 10, ap++;
[ap + -38] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 18];
jmp rel 29;
[ap + -1] = [[fp + -10] + 18];
[ap + 0] = 97, ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -10] + 19];
jmp rel 12;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -10] + 19];
[ap + 0] = [fp + -10] + 20, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 43;
[ap + 0] = [fp + -10] + 20, ap++;
[ap + 0] = [ap + -48] + 1970, ap++;
jmp rel 74;
call rel 1629;
[ap + 0] = [fp + -10] + 19, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 48, ap++;
%{ memory[ap + 0] = (memory[ap + -39] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -40] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -10] + 18];
jmp rel 46;
[ap + 1] = [ap + -40] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -10] + 18];
ap += 2;
[ap + 0] = [fp + -10] + 19, ap++;
[ap + 0] = [ap + -48] + 250, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -1] = [[fp + -3] + 0];
jmp rel 18 if [ap + -49] != 0;
jmp rel 13 if [ap + -48] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2570, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = [ap + -2], ap++;
jmp rel 4;
[ap + 0] = [ap + -2] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -215;
ret;
[ap + 0] = [fp + -10] + 19, ap++;
[ap + 0] = [ap + -46] + 2340, ap++;
call rel 383;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -10] + 17, ap++;
[ap + 0] = [ap + -38] + 3480, ap++;
jmp rel 6;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = [ap + -36] + 4050, ap++;
call rel -4468;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -15565;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4490 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768206966, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 143;
[fp + -9] = [ap + 0] + 4490, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 122;
[fp + -7] = [ap + 0] + 1, ap++;
jmp rel 15 if [fp + -3] != 0;
ap += 13;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -17] + 1790, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[ap + -18] + 0], ap++;
[ap + 0] = 1, ap++;
jmp rel 93;
[ap + 0] = [fp + -4] * 256, ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[fp + -3] = [ap + 0] + 30, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[fp + -3] = [ap + 0] + 4294967295, ap++;
jmp rel 20 if [ap + -1] != 0;
call rel -3781;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
ap += 9;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -17] + 1230, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17] + [ap + -16], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 49;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -4] = [[fp + -10] + 2], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[fp + -10] + 3];
jmp rel 18;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -3] = [[fp + -10] + 2], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[fp + -10] + 3];
ap += 1;
[ap + 0] = [fp + -10] + 4, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8;
[ap + 0] = [fp + -10] + 4, ap++;
[ap + 0] = [ap + -14] + 10, ap++;
[ap + 0] = 88068479653790488123916992367510505285, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -8], ap++;
[fp + -7] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -132;
ret;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [ap + -3] + 5190, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -15727;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = 8570164797203042506019982424912417129509686, ap++;
call rel -10853;
ret;
[ap + 0] = 573087285299505011920718992710461799, ap++;
call rel -10858;
ret;
%{ memory[ap + 0] = 17060 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768194396, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 136;
[fp + -8] = [ap + 0] + 17060, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 15 if [fp + -3] != 0;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2] + 17960, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 89;
[ap + 0] = [[fp + -7] + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 10;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [ap + -4] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
call rel 1283;
jmp rel 44 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 1457;
jmp rel 30 if [ap + -6] != 0;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + -8] = [[fp + -4] + 0];
[ap + -7] = [[fp + -4] + 1];
[ap + -6] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
[ap + -4] = [[fp + -4] + 4];
[ap + -3] = [[fp + -4] + 5];
[ap + -2] = [[fp + -4] + 6];
[ap + -1] = [[fp + -4] + 7];
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -89;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -94] + 2870, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 7;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -29] + 12440, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
[ap + 0] = [ap + -4] + 16560, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
ap += 2;
[ap + 0] = [ap + -4] + 16840, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -15896;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 608642104203229548495787928534675319, ap++;
call rel -11020;
ret;
[ap + 0] = 139861644157973526622261446548040478583, ap++;
call rel -11025;
ret;
[ap + 0] = 546334547492084087938116166309670775, ap++;
call rel -11030;
ret;
[ap + 0] = 155775200859838811096160292336445452151, ap++;
call rel -11035;
ret;
[ap + 0] = 35795063018498839831738724970515344945015, ap++;
call rel -11040;
ret;
[ap + 0] = 139824464916011093092299301806806953847, ap++;
call rel -11045;
ret;
jmp rel [fp + -9];
jmp rel 519;
jmp rel 507;
jmp rel 495;
jmp rel 483;
jmp rel 471;
jmp rel 459;
jmp rel 447;
jmp rel 396;
jmp rel 382;
jmp rel 367;
jmp rel 352;
jmp rel 340;
jmp rel 328;
jmp rel 316;
jmp rel 304;
jmp rel 292;
jmp rel 280;
jmp rel 268;
jmp rel 256;
jmp rel 244;
jmp rel 232;
jmp rel 220;
jmp rel 206;
jmp rel 191;
jmp rel 176;
jmp rel 164;
jmp rel 152;
jmp rel 140;
jmp rel 128;
jmp rel 116;
jmp rel 104;
jmp rel 92;
jmp rel 80;
jmp rel 68;
jmp rel 56;
jmp rel 44;
jmp rel 32;
jmp rel 20;
jmp rel 8;
ap += 1;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 343;
ap += 3;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 5, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 6, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 7, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 8, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 9, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 10, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 11, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 12, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 13, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 14, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 15, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[fp + -6] = [[fp + -3] + 3];
[fp + -5] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
ap += 3;
[ap + 0] = 16, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[fp + -6] = [[fp + -3] + 3];
[fp + -5] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
ap += 3;
[ap + 0] = 17, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[fp + -6] = [[fp + -3] + 2];
[fp + -5] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 3;
[ap + 0] = 18, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 19, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 20, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 21, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 22, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 23, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 24, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 25, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 26, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 27, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 28, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 29, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[fp + -6] = [[fp + -3] + 3];
[fp + -5] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
ap += 3;
[ap + 0] = 30, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[fp + -6] = [[fp + -3] + 3];
[fp + -5] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
ap += 3;
[ap + 0] = 31, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[fp + -6] = [[fp + -3] + 2];
[fp + -5] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[ap + 0] = 32, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[fp + -6] = [[fp + -3] + 2];
jmp rel [fp + -5];
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 2;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 2;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 3;
[ap + 0] = 33, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 34, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 35, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 36, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 37, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 38, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 3;
[ap + 0] = 39, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel [fp + -6];
jmp rel 67;
jmp rel 56;
jmp rel 45;
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 55;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 46;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 37;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 19;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 10;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 100, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = 1062799989286861497646673457769309433976004466846907043354399004328696077865, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
%{
if '__boxed_segment' not in globals():
    __boxed_segment = segments.add()
memory[ap + 0] = __boxed_segment
__boxed_segment += 3
%}
[ap + -3] = [[ap + 0] + 0], ap++;
[ap + -3] = [[ap + -1] + 1];
[ap + -2] = [[ap + -1] + 2];
[fp + -5] = [[ap + -5] + 0];
[fp + -4] = [[ap + -5] + 1];
[fp + -3] = [[ap + -5] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -11] + 3;
call rel -16208;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -5] = [[fp + -9] + 1];
[fp + 0] = [[fp + -9] + 2];
[fp + 1] = [[fp + -9] + 3];
[ap + -3] = [[fp + -9] + 4];
[ap + -2] = [[fp + -9] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [fp + -9] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 8], ap++;
[ap + 0] = [[fp + -9] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
jmp rel [fp + -14];
jmp rel 98;
jmp rel 31;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15] + 13210, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3068;
jmp rel 28 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 10040, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3052;
jmp rel 20 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[fp + -9] = [[fp + -3] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel -16423;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3120;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 6], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 30 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel 3084;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -355], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 341;
call rel -2582;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 356;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
jmp rel 11 if [fp + -3] != 0;
ap += 22;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -3] = [ap + 0] + 100, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[fp + -4] = [ap + 0] + 100, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 104;
%{ memory[ap + 0] = (memory[fp + -4] + memory[fp + -3]) % PRIME < 65536 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 85;
[ap + 1] = [fp + -4] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768145920, ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -1] * 100, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 1];
jmp rel 60;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] * [fp + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[fp + -5] + 2];
jmp rel 43;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + -6] = [ap + 1] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 3];
jmp rel 23;
[ap + -1] = [[fp + -5] + 3];
ap += 3;
[ap + 0] = 100, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -5], memory[ap + -1]) %}
[ap + 4] = [[fp + -5] + 4], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -5] + 5], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -10] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel 3803;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
call rel 3789;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 9;
call rel -1126;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 20;
jmp rel 4;
ap += 21;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 100, ap++;
ret;
[ap + 0] = 35797700703871609771601936749056825782135, ap++;
call rel -12184;
ret;
[ap + 0] = 139834768374498475669889972816734613367, ap++;
call rel -12189;
ret;
[ap + 0] = 608642109794502019480482122260311927, ap++;
call rel -12194;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 166;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 59 if [ap + -1] != 0;
ap += 1;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -6] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 99;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 92;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 45;
[ap + 0] = [[ap + -6] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 5;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 40;
ap += 8;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 33;
ap += 8;
[ap + -11] = [ap + 0] + 3, ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 14;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 2440;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 40 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 40, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943335, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 2401 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211416, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010280, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
jmp rel [ap + -1];
jmp rel 2324;
jmp rel 2258;
jmp rel 2192;
jmp rel 2124;
jmp rel 2058;
jmp rel 1992;
jmp rel 1926;
jmp rel 1885;
jmp rel 1855;
jmp rel 1828;
jmp rel 1801;
jmp rel 1733;
jmp rel 1665;
jmp rel 1597;
jmp rel 1529;
jmp rel 1461;
jmp rel 1393;
jmp rel 1325;
jmp rel 1257;
jmp rel 1189;
jmp rel 1121;
jmp rel 1053;
jmp rel 1023;
jmp rel 996;
jmp rel 969;
jmp rel 901;
jmp rel 833;
jmp rel 765;
jmp rel 697;
jmp rel 629;
jmp rel 561;
jmp rel 493;
jmp rel 425;
jmp rel 357;
jmp rel 289;
jmp rel 221;
jmp rel 155;
jmp rel 89;
jmp rel 21;
ap += 43;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 79, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 77, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2259;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2251;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 75, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2195;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2187;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 73, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2131;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2123;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 71, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2065;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 2057;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 69, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1999;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1991;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 67, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1933;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1925;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 65, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1867;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1859;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 63, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1801;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1793;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 61, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1735;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1727;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 59, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1669;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1661;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 57, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1603;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1595;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 55, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1537;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1529;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 53, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1471;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1463;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 51, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1405;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1397;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 2508;
jmp rel 14 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 49, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 885;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 2700;
jmp rel 14 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 47, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 860;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 2890;
jmp rel 15 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 45, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 832;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1261;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1253;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 41, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1195;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1187;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 39, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1129;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1121;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1063;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 1055;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 997;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 989;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 33, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 931;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 923;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 31, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 865;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 857;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 799;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 791;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 27, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 733;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 725;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 667;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 659;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 601;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 593;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 1704;
jmp rel 14 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 21, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 81;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 1896;
jmp rel 14 if [ap + -5] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 19, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 56;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 2086;
jmp rel 15 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 17, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 28;
ap += 14;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
call rel 2222;
jmp rel 15 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 420;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 412;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 356;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 348;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 292;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 284;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 53;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 226;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 218;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 162;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 154;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 98;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 90;
ap += 34;
[ap + -40] = [ap + 0] + [ap + -41], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 51;
[ap + 0] = [[ap + -42] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
ap += 5;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 34;
ap += 8;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 26;
ap += 40;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 50;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 1570 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209886, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 35;
[fp + -7] = [ap + 0] + 1570, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -26;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 2270, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -19773;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 8;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -64;
jmp rel 100 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 4] = [ap + -11];
[fp + 5] = [ap + -10];
[fp + 6] = [ap + -9];
[fp + 7] = [ap + -8];
call rel 1813;
jmp rel 59 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [ap + -11];
[fp + 1] = [ap + -10];
[fp + 2] = [ap + -9];
[fp + 3] = [ap + -8];
call rel 1797;
jmp rel 18 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 9, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 1759;
ret;
[ap + 0] = 255, ap++;
[fp + -3] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 848;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1811;
jmp rel 810 if [ap + -3] != 0;
[ap + 0] = 256, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 5];
[ap + -1] = [[fp + -4] + 6];
[ap + 0] = [[fp + -4] + 7], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 748;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1770;
jmp rel 710 if [ap + -3] != 0;
[ap + 0] = 65536, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 10];
[ap + -1] = [[fp + -4] + 11];
[ap + 0] = [[fp + -4] + 12], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 648;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1729;
jmp rel 610 if [ap + -3] != 0;
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 15];
[ap + -1] = [[fp + -4] + 16];
[ap + 0] = [[fp + -4] + 17], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 548;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1688;
jmp rel 510 if [ap + -3] != 0;
[ap + 0] = 4294967296, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 20];
[ap + -1] = [[fp + -4] + 21];
[ap + 0] = [[fp + -4] + 22], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 446;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = 1099511627776, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -17] + 5], ap++;
[ap + 5] = [[ap + -18] + 6], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -21] + 7], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -24] + 8];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 25];
[ap + -1] = [[fp + -4] + 26];
[ap + 0] = [[fp + -4] + 27], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -28] + 9];
jmp rel 404;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -28] + 9];
[ap + 0] = 281474976710656, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -29] + 10], ap++;
[ap + 5] = [[ap + -30] + 11], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -33] + 12], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -36] + 13];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 30];
[ap + -1] = [[fp + -4] + 31];
[ap + 0] = [[fp + -4] + 32], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -40] + 14];
jmp rel 362;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -40] + 14];
[ap + 0] = 72057594037927936, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -41] + 15], ap++;
[ap + 5] = [[ap + -42] + 16], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -45] + 17], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -48] + 18];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 255, ap++;
[ap + -3] = [[fp + -4] + 35];
[ap + -1] = [[fp + -4] + 36];
[ap + 0] = [[fp + -4] + 37], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -52] + 19];
jmp rel 320;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -52] + 19];
[ap + 0] = 18446744073709551616, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -53] + 20], ap++;
[ap + 5] = [[ap + -54] + 21], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -57] + 22], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -60] + 23];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 40];
[ap + -1] = [[fp + -4] + 41];
[ap + 0] = [[fp + -4] + 42], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -64] + 24];
jmp rel 255;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -64] + 24];
[ap + 0] = [ap + -64] + 25, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1659;
jmp rel 217 if [ap + -3] != 0;
[ap + 0] = 1208925819614629174706176, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 45];
[ap + -1] = [[fp + -4] + 46];
[ap + 0] = [[fp + -4] + 47], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 155;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1618;
jmp rel 117 if [ap + -3] != 0;
[ap + 0] = 79228162514264337593543950336, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 0], ap++;
[ap + 5] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 65535, ap++;
[ap + -3] = [[fp + -4] + 50];
[ap + -1] = [[fp + -4] + 51];
[ap + 0] = [[fp + -4] + 52], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 65536 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 65536, ap++;
[ap + -1] = [[ap + -16] + 4];
jmp rel 55;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -16] + 4];
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1577;
jmp rel 19 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 55, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -304], ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [ap + -181], ap++;
[ap + 0] = [ap + -172], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + 55, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 22;
call rel -9303;
[ap + 0] = [ap + -46] + 5, ap++;
[ap + 0] = [fp + -4] + 55, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 42;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [fp + -4] + 50, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
ret;
ap += 64;
call rel -9362;
[ap + 0] = [ap + -88] + 5, ap++;
[ap + 0] = [fp + -4] + 50, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 84;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [fp + -4] + 45, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -98], ap++;
ret;
ap += 106;
call rel -9421;
[ap + 0] = [ap + -178] + 25, ap++;
[ap + 0] = [fp + -4] + 45, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 116;
[ap + 0] = [ap + -168] + 20, ap++;
[ap + 0] = [fp + -4] + 40, ap++;
jmp rel 24;
ap += 128;
[ap + 0] = [ap + -168] + 15, ap++;
[ap + 0] = [fp + -4] + 35, ap++;
jmp rel 16;
ap += 140;
[ap + 0] = [ap + -168] + 10, ap++;
[ap + 0] = [fp + -4] + 30, ap++;
jmp rel 8;
ap += 152;
[ap + 0] = [ap + -168] + 5, ap++;
[ap + 0] = [fp + -4] + 25, ap++;
call rel -9480;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 174;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [fp + -4] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -188], ap++;
[ap + 0] = [ap + -188], ap++;
ret;
ap += 196;
call rel -9537;
[ap + 0] = [ap + -220] + 5, ap++;
[ap + 0] = [fp + -4] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 216;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -230], ap++;
ret;
ap += 238;
call rel -9596;
[ap + 0] = [ap + -262] + 5, ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 258;
[ap + 0] = [ap + -262], ap++;
[ap + 0] = [fp + -4] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
ret;
ap += 280;
call rel -9655;
[ap + 0] = [ap + -304] + 5, ap++;
[ap + 0] = [fp + -4] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 300;
[ap + 0] = [ap + -304], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -314], ap++;
[ap + 0] = [ap + -314], ap++;
ret;
ap += 322;
call rel -9714;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = 155775200865430083567144986530171088759, ap++;
call rel -15935;
ret;
[ap + 0] = 155775200863573220731881744814274539383, ap++;
call rel -15940;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 198;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 172 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 148;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 122 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 98;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 72 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 48;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 7];
ap += 4;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 58;
ap += 8;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 50;
ap += 7;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 41;
ap += 15;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 33;
ap += 14;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 24;
ap += 22;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 16;
ap += 21;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 29;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 198;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 172 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 148;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 122 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 98;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 72 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 48;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 6], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 7], ap++;
[ap + -5] = [[fp + -5] + 8];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -5] + 6];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -5] + 7];
ap += 4;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 58;
ap += 8;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 50;
ap += 7;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 41;
ap += 15;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 33;
ap += 14;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 24;
ap += 22;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 16;
ap += 21;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 29;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 147;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 121 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 97;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 71 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 2];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 47;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -5] + 5], ap++;
[ap + -5] = [[fp + -5] + 6];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -5] + 5];
ap += 4;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 41;
ap += 8;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 33;
ap += 7;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 24;
ap += 15;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 16;
ap += 14;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 22;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 174;
[ap + 0] = [[fp + -4] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 148 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 126;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 2], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -5] + 3], ap++;
[ap + -5] = [[fp + -5] + 4];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 100 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 78;
[ap + 0] = [[ap + -3] + 0], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 3;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 7, ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 5, ap++;
ret;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 1;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 3, ap++;
ret;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41;
ap += 4;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 33;
ap += 2;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 24;
ap += 10;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 16;
ap += 8;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
ap += 16;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 2970 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 49;
[fp + -7] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 30;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + -8] = [[fp + -3] + 0];
[ap + -7] = [[fp + -3] + 1];
[ap + -6] = [[fp + -3] + 2];
[ap + -5] = [[fp + -3] + 3];
[ap + -4] = [[fp + -3] + 4];
[ap + -3] = [[fp + -3] + 5];
[ap + -2] = [[fp + -3] + 6];
[ap + -1] = [[fp + -3] + 7];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
call rel -40;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 3670, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -21680;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 16000 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768195456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 16000, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 9;
[fp + 1] = [fp + -5];
call rel 335;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 16700, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -21757;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + 255, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 134;
[ap + 0] = 128, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 92;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = 128, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 70;
[ap + -1] = [[fp + -4] + 1];
%{ memory[ap + 0] = memory[ap + -1] < 128 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 128, ap++;
[ap + -1] = [[fp + -4] + 2];
jmp rel 56;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 0] + [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 128) % PRIME < 256 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211584, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 23;
[ap + -3] = [ap + 0] + 128, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 27;
[ap + 0] = [ap + -2] + 128, ap++;
[ap + -1] = [[fp + -4] + 3];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -4] + 4];
ap += 8;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
ret;
call rel -5921;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
call rel -5925;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 37;
ap += 6;
call rel -4778;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
%{ memory[ap + 0] = memory[fp + -3] < 128 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 128, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 15;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211328, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 9;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
call rel -10813;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 21;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = -128, ap++;
ret;
[fp + -3] = [ap + 0] + 65535, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 134;
[ap + 0] = 32768, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 92;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = 32768, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 70;
[ap + -1] = [[fp + -4] + 1];
%{ memory[ap + 0] = memory[ap + -1] < 32768 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 2];
jmp rel 56;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 2];
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 0] + [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 32768) % PRIME < 65536 %}
jmp rel 14 if [ap + 0] != 0, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 340282366920938463463374607431768244224, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 23;
[ap + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 3];
jmp rel 27;
[ap + 0] = [ap + -2] + 32768, ap++;
[ap + -1] = [[fp + -4] + 3];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 4];
ap += 8;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
ret;
call rel -6054;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
call rel -6058;
[ap + 0] = [fp + -4] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 37;
ap += 6;
call rel -1185;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
%{ memory[ap + 0] = memory[fp + -3] < 32768 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 32768, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 15;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768178688, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 9;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
call rel -10961;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 21;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = -32768, ap++;
ret;
[fp + -13] = [[fp + -3] + 0];
[fp + -11] = [ap + 0] + [fp + -12], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel -21702;
jmp rel 15 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 10;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel [fp + -10];
jmp rel 98;
jmp rel 81;
jmp rel 65;
jmp rel 49;
jmp rel 31;
jmp rel 13;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
[ap + 0] = [fp + -11] + 7160, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
jmp rel 70;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -5350;
ret;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 61;
ret;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 4170, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 77;
ret;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 4170, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 63;
ret;
[ap + 0] = 5, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -11] + 7260, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 6, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11] + 870, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 47;
ret;
[fp + -9] = [[fp + -3] + 0];
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel -21850;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 34;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 6, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 27;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 87;
ret;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 7, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 99;
ret;
ap += 2;
%{ memory[ap + 0] = 11430 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768200026, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 53;
[fp + -7] = [ap + 0] + 11430, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 36;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 6;
[fp + 1] = [fp + -5];
call rel -213;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -41;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 12130, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -22339;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 91;
jmp rel 11 if [ap + -3] != 0;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 16530 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768194926, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 54;
[fp + -7] = [ap + 0] + 16530, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 7;
[fp + 1] = [fp + -5];
call rel 48;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -42;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3] + 17230, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -22436;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -211;
ret;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3;
ret;
[fp + -11] = [[fp + -3] + 0];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel 3;
ret;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3;
ret;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -410;
ret;
